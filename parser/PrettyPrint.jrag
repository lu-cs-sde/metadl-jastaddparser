/*
 * The JastAdd Extensible Java Compiler (http://jastadd.org) is covered
 * by the modified BSD License. You should have received a copy of the
 * modified BSD license with this compiler.
 * 
 * Copyright (c) 2005-2008, Torbjorn Ekman
 * All rights reserved.
 */

import java.util.Iterator;
import java.io.PrintStream;

aspect PrettyPrint {
  public static String ASTNode.sourceName = "";

	protected static PrintStream ASTNode.out;
	protected static void ASTNode.print(String s) {
		out.print(s);
	}
	protected static void ASTNode.println(String s) {
		print(s + "\n");
	}
	
	public void ASTNode.pp() {
	}
	public void Grammar.pp(PrintStream out, boolean beaver) {
		ASTNode.out = out;
		for(int i = 0; i < getNumClause(); i++) {
      if(getClause(i) instanceof Declaration) {
        getClause(i).pp();
      }
    }
		for(Iterator iter = terminals().iterator(); iter.hasNext(); ) {
			String terminal = (String)iter.next();
			println("%terminals " + terminal + ";");
		}
    for(Iterator iter = ruleNames().iterator(); iter.hasNext(); ) {
      String name = (String)iter.next();
      ArrayList list = rule(name);
      boolean genOpt = false;
      boolean genOptList = false;
      boolean genList = false;
      String typeName = "";
      for(Iterator i2 = list.iterator(); i2.hasNext(); ) {
        Rule r = (Rule)i2.next();
        if(r.genOpt())
          genOpt = true;
        if(r.genOptList())
          genOptList = true;
        if(r.genList())
          genList = true;
        typeName = r.type();
      }
			println("%typeof " + name + " = \"" + typeName + "\";");
			if(genOpt) {
        Rule r = nonTerminal(name);
        if(r != null && r.type().equals("List"))
			    println("%typeof " + name + "_opt = \"List\";");
			  else
          println("%typeof " + name + "_opt = \"Opt\";");
      }
			if(genOptList)
			  println("%typeof " + name + "_opt_list = \"List\";");
			if(genList)
			  println("%typeof " + name + "_list = \"List\";");
		}
    String defaultGoal = null;
    Collection c = new ArrayList();
    for(int i = 0; i < getNumClause(); i++) {
      if(defaultGoal == null && (getClause(i) instanceof Rule))
        defaultGoal = ((Rule)getClause(i)).name();
      if(getClause(i) instanceof Goal)
        c.add(((Goal)getClause(i)).getName());
    }
    if(c.isEmpty())
      c.add(defaultGoal);
    for(Iterator iter = c.iterator(); iter.hasNext(); ) {
      String s = (String)iter.next();
      println("%goal " + s + ";");
    }
    for(Iterator iter = rules().iterator(); iter.hasNext(); ) {
      Rule r = (Rule)iter.next();
      r.pp();
    }

    // generate _opt, _opt_list, _list
    for(Iterator iter = ruleNames().iterator(); iter.hasNext(); ) {
      String name = (String)iter.next();
      ArrayList list = rule(name);
      boolean genOpt = false;
      boolean genOptList = false;
      boolean genList = false;
      String typeName = "";
      for(Iterator i2 = list.iterator(); i2.hasNext(); ) {
        Rule r = (Rule)i2.next();
        if(r.genOpt())
          genOpt = true;
        if(r.genOptList())
          genOptList = true;
        if(r.genList())
          genList = true;
        typeName = r.type();
      }
      if(genOpt) {
        Rule r = (Rule)list.iterator().next();
        if(r.type().equals("List")) {
          println(name + "_opt =");
          println("    {: return new List(); :}");
          println("  | " + name + ".n {: return n; :}");
          println("  ;");
        }
        else if(r.type().equals("Opt")) {
          println(name + "_opt =");
          println("    {: return new Opt(); :}");
          println("  | " + name + ".n {: return n; :}");
          println("  ;");
        }
        else {
          println(name + "_opt =");
          println("    {: return new Opt(); :}");
          println("  | " + name + ".n {: return new Opt(n); :}");
          println("  ;");
        }
      }
      if(genOptList) {
        println(name + "_opt_list =");
        println("    {: return new List(); :}");
        println("  | " + name + "_list.n {: return n; :}");
        println("  ;");
      }
      if(genList) {
        println(name + "_list =");
        println("    " + name + ".n {: return new List().add(n); :}");
        println("  | " + name + "_list.l " + name + ".n {: return l.add(n); :}");
        println("  ;");
      }
      print("\n");
    }
  }
	
	public void Header.pp() {
		println("%header {: // Generated from " + ASTNode.sourceName + "\n" + getCODE() + " :};");
	}
	public void ClassCode.pp() {
		println("%embed {: // Generated from " + ASTNode.sourceName + "\n" + getCODE() + " :};");
	}
	
	public void Rule.pp() {
    if(replaced())
      return;
		println(name() + " =");
		print("    ");
		for(int i = 0; i < getNumDefinition(); i++) {
			if(i != 0)
				print("\n  | ");
			getDefinition(i).pp();
		}
		print("  ;");
		print("\n");
	}

  inh boolean Element.inlineOptional();
  eq Definition.getElement(int index).inlineOptional() =
    getElement(index) instanceof OptionalElement && 
    (index == 0 || getElement(index-1).isNonTerminal() || getElement(index-1) instanceof OptionalElement ||
    (index < getNumElement() - 1 && (getElement(index+1).isNonTerminal() || getElement(index+1) instanceof OptionalElement)));
    /*
  eq Definition.getElement(int index).inlineOptional() =
    getElement(index) instanceof OptionalElement && (index == 0 || index == getNumElement() - 1 || getElement(index-1).isNonTerminal() || getElement(index-1) instanceof OptionalElement || getElement(index+1).isNonTerminal() || getElement(index+1) instanceof OptionalElement);
    // inlineLeft(index) || inlineRight(index);
*/
  syn lazy boolean Definition.inlineLeft(int index) =
    getElement(index) instanceof OptionalElement && (index == 0 || getElement(index-1) instanceof OptionalElement); //inlineLeft(index - 1));
  syn lazy boolean Definition.inlineRight(int index) =
    getElement(index) instanceof OptionalElement && (index == getNumElement() - 1 || getElement(index+1) instanceof OptionalElement); //inlineRight(index + 1));

  syn lazy int Definition.permutations() {
    int num = 1;
		for(int i = 0; i < getNumElement(); i++)
      if(getElement(i).inlineOptional())
        num *=2;
    return num;
  }

  public void Definition.pp() {
    for(int j = 0; j < permutations(); j++) {
      int optIndex = 1;
      if(j != 0)
        print("\n  | ");
      for(int i = 0; i < getNumElement(); i++) {
        if(getElement(i).inlineOptional()) {
          if((j & optIndex) != 0) {
            getElement(i).pp();
            print(" ");
          }
          optIndex *= 2;
        }
        else {
          getElement(i).pp();
          print(" ");
        }
      }
      if(getCODE() != null && !getCODE().equals("")) {
        String code = getCODE();
        optIndex = 1;
        for(int i = 0; i < getNumElement(); i++) {
          if(getElement(i).inlineOptional() && getElement(i).isNonTerminal()) {
            String name = getElement(i).alias();
            // the char before must be one of " ", "(", ")", ","
            // the char after must be one of " ", "," ")", "."
            String pattern = "([ (),=+])(" + name + ")([ ,)\\.+=;])";
            java.util.regex.Pattern p = java.util.regex.Pattern.compile(pattern);
            java.util.regex.Matcher m = p.matcher(code);
            StringBuffer sb = new StringBuffer();
            while (m.find()) {
              String type = getElement(i).rule().type();
              if((j & optIndex) != 0) {
                if(type.equals("Opt") || type.equals("List"))
                  m.appendReplacement(sb, "$1$2$3");
                else
                  m.appendReplacement(sb, "$1new Opt($2)$3");
              }
              else {
                if(type.equals("List"))
                  m.appendReplacement(sb, "$1new List()$3");
                else 
                  m.appendReplacement(sb, "$1new Opt()$3");
              }
            }
            m.appendTail(sb);
            code = sb.toString();
          }
          else if(!getElement(i).isNonTerminal()) {
            String name = getElement(i).alias();
            // the char before must be one of " ", "(", ")", ","
            // the char after must be one of " ", "," ")", "."
            String pattern = "([ (),=+])(" + name + ")([ ,)\\.+=;])";
            java.util.regex.Pattern p = java.util.regex.Pattern.compile(pattern);
            java.util.regex.Matcher m = p.matcher(code);
            StringBuffer sb = new StringBuffer();
            while (m.find()) {
              if(Character.isUpperCase(name.charAt(0)))
                m.appendReplacement(sb, "$1$2$3");
              else
                m.appendReplacement(sb, "$1((String)$2.value)$3");
            }
            m.appendTail(sb);
            code = sb.toString();
            //code = code.replaceAll(pattern, "((String)" + name + ".value)");
          }
          if(getElement(i).inlineOptional())
            optIndex *= 2;
        }
        println("{: " + code + " :}");
      }
    }
  }
	public void Element.pp() {
		print(name());
		if(alias() != null)
		  print("." + alias());
	}
	public void OptionalElement.pp() {
		if(isNonTerminal()) {
      if(inlineOptional())
   			print(name());
      else {
   			print(name() +"_opt");
      }
			if(alias() != null)
			  print("." + alias());
		}
		else {
   			print(name());
			if(alias() != null)
			  print("." + alias());
      if(!inlineOptional())
			  print("?");
		}
	}
	public void ListPlusElement.pp() {
		if(isNonTerminal()) {
			print(name() + "_list");
			if(alias() != null)
			  print("." + alias());
		}
		else {
   			print(name());
			if(alias() != null)
			  print("." + alias());
			print("+");
		}
	}
	public void ListElement.pp() {
		if(isNonTerminal()) {
			print(name() + "_opt_list");
			if(alias() != null)
		  		print("." + alias());
		}
		else {
   			print(name());
			if(alias() != null)
			  print("." + alias());
			print("*");
		}
	}
	public void IdUse.pp() {
		print(getID());
	}
	public void IdDecl.pp() {
		print(getID());
	}
	
  syn lazy boolean Rule.genOpt() {
  	for(Iterator iter = uses().iterator(); iter.hasNext(); ) {
  	  Element e = (Element)iter.next();
  	  if(e.genOpt())
  	    return true;
  	}
  	return false;
  }
  syn lazy boolean Rule.genOptList() {
  	for(Iterator iter = uses().iterator(); iter.hasNext(); ) {
  	  Element e = (Element)iter.next();
  	  if(e.genOptList())
  	    return true;
  	}
  	return false;
  }
  syn lazy boolean Rule.genList() {
  	for(Iterator iter = uses().iterator(); iter.hasNext(); ) {
  	  Element e = (Element)iter.next();
  	  if(e.genList())
  	    return true;
  	}
  	return false;
  }

  syn boolean Element.genOpt() = false;
  eq OptionalElement.genOpt() = !inlineOptional();
  syn boolean Element.genOptList() = false;
  eq ListElement.genOptList() = true;
  syn boolean Element.genList() = false;
  eq ListElement.genList() = true;
  eq ListPlusElement.genList() = true;
	
}
