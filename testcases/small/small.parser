%header {:
package small.parser;
	
import small.ast.*;
import java.io.IOException;
:};

%embed {:
	public Object parse(Scanner source) throws IOException, Parser.Exception {
		Object calc = super.parse(source);
		((Calculation) calc).print(System.out, 0);
		return calc;
	}
:};

Calculation calc
	= stmt.stmts*				{: return new Calculation(stmts); :}
	;
	
Stmt stmt
	= assign.a SEMI				{: return a; :}
	| expr.e SEMI				{: return e; :}
	;

Assign assign
	= id_use.id EQUALS expr.e		{: return new Assign(id, e); :}
	;

Expr expr
	= expr.e PLUS term.t		{: return new AddExpr(e, t); :}
	| expr.e MINUS term.t		{: return new SubExpr(e, t); :}
	| term.t					{: return t; :}
	;

Expr term
	= term.t MULT factor.f		{: return new MulExpr(t, f); :}
	| term.t DIV factor.f		{: return new DivExpr(t, f); :}
	| factor.f					{: return f; :}
	;

Expr factor
	= id_use.id					{: return id; :}
	| number.n					{: return n; :}
	| LPAREN expr.e RPAREN		{: return new ParExpr(e); :}
	;

IdUse id_use
	= IDENTIFIER.id				{: return new IdUse(id); :}
	;

Num number
	= NUMBER.n					{: return new Num(n); :}
	;