aspect ToString {
    public String ASTNode.toString() {
		StringBuffer sb = new StringBuffer();
		toString(sb, 1);
		return sb.toString();
    }

    public void ASTNode.toString(StringBuffer sb, int indent) {
		appendString(sb, indent);
		sb.append('\n');
		appendChildren(sb, indent);
    }
    
    public void List.toString(StringBuffer sb, int indent) {
    	appendChildren(sb, indent - 1);
    }
   
    public void Opt.toString(StringBuffer sb, int indent) {
    	appendChildren(sb, indent - 1);
    }
    
    public void ASTNode.appendString(StringBuffer sb, int indent) {}
 
    public void A.appendString(StringBuffer sb, int indent) {
    	appendRowCol(sb, indent, getStartLine(), getStartColumn(), getEndLine(), getEndColumn());
    	sb.append("A");
    }

    public void B.appendString(StringBuffer sb, int indent) {
    	appendRowCol(sb, indent, getStartLine(), getStartColumn(), getEndLine(), getEndColumn());
		sb.append("B(").append(getT1()).append(')');
    }

    public void C.appendString(StringBuffer sb, int indent) {
    	appendRowCol(sb, indent, getStartLine(), getStartColumn(), getEndLine(), getEndColumn());
    	sb.append("C(").append(getT2()).append(')');
    }
    
    public void ASTNode.appendRowCol(StringBuffer sb, int indent, int lStart, int cStart, int lEnd, int cEnd) {
		sb.append('(').append(lStart).append(':');
		sb.append(cStart).append(")-(");
		sb.append(lEnd).append(':');
		sb.append(cEnd).append(")");
		appendIndent(sb, indent);
    }

    public void ASTNode.appendIndent(StringBuffer sb, int indent) {
		for (int i = 0; i < indent; i++)
		    sb.append(' ');
    }
    
    public void ASTNode.appendChildren(StringBuffer sb, int indent) {
	    for (int i = 0; i < getNumChild(); i++)
	    	getChild(i).toString(sb, indent + 1);
    }
}
