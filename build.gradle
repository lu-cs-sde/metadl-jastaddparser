apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'signing'

project.version = '1.0.4'
project.group = 'org.jastadd'
project.archivesBaseName = 'jastaddparser'

repositories {
	mavenCentral()
}

configurations {
	jastadd
	jastaddparser
	jflex
	beaver
}

dependencies {
	jastadd 'org.jastadd:jastadd:2.1.13'
	jastaddparser('org.jastadd:jastaddparser:1.0.3') { force = true /* Avoid conflict with local artifact. */ }
	jflex 'de.jflex:jflex:1.6.1'
	beaver 'net.sf.beaver:beaver-cc:0.9.11'
	compile 'net.sf.beaver:beaver-rt:0.9.11'
	testCompile 'junit:junit:4.12'
	testCompile 'org.apache.ant:ant:1.9.4'
	testCompile 'org.apache.ant:ant-junit:1.9.4'
}

sourceSets {
	main {
		java {
			srcDirs 'src/gen', 'src/java'
		}
	}
	test {
		java {
			srcDirs 'src/test'
		}
	}
}

sourceCompatibility = '1.6'
targetCompatibility = '1.6'

jar {
	manifest.attributes 'Main-Class': 'org.jastadd.jastaddparser.Main'
	from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
}

compileJava.dependsOn 'generateParser'
compileJava.dependsOn 'generateScanner'
compileJava.dependsOn 'generateJastAdd'
clean.dependsOn 'cleanGen'
test.dependsOn 'copyJar'

task copyJar(type: Copy) {
	dependsOn 'jar'
	from jar.archivePath
	into project.projectDir
	rename { _ -> "JastAddParser.jar" }
}

task cleanGen(type: Delete) {
	delete 'src/gen'
	delete 'src/tmp'
	delete 'tmp' // Test outputs.
	delete 'JastAddParser.jar'
}

task generateJastAdd(type: JavaExec) {
	classpath = configurations.jastadd
	main = 'org.jastadd.JastAdd'
	args ([ '--rewrite=regular',
		'--package=org.jastadd.jastaddparser.ast',
		'--beaver',
		"--o=${file('src/gen').path}" ] +
		fileTree('src/jastadd')
			.include('**/*.ast')
			.include('**/*.jadd')
			.include('**/*.jrag')
			.files)

	inputs.dir 'src/jastadd'
	outputs.dir 'src/gen/org/jastadd/jastaddparser/ast'

	doFirst {
		file('src/gen').mkdirs()
	}
}

task preprocessParser(type: JavaExec) {
	classpath = configurations.jastaddparser
	main = 'org.jastadd.jastaddparser.Main'
	args file('src/parser/GrammarParser.parser').path,
		file('src/tmp/parser/GrammarParser.beaver').path

	inputs.files 'src/parser/GrammarParser.parser'
	outputs.files 'src/tmp/parser/GrammarParser.beaver'

	doFirst {
		file('src/tmp/parser').mkdirs()
	}
}

task generateParser(type: JavaExec) {
	dependsOn 'preprocessParser'

	classpath = configurations.beaver
	main = 'beaver.comp.run.Make'
	args '-c', '-w', '-t', '-d', file('src/gen/org/jastadd/jastaddparser/parser').path,
		file('src/tmp/parser/GrammarParser.beaver').path

	inputs.files 'src/tmp/parser/GrammarParser.beaver'
	outputs.files 'src/gen/org/jastadd/jastaddparser/parser/GrammarParser.java'

	doFirst {
		file('src/gen/org/jastadd/jastaddparser/parser').mkdirs()
	}
}

task generateScanner(type: JavaExec) {
	classpath = configurations.jflex
	main = 'jflex.Main'
	args '-d', file('src/gen/org/jastadd/jastaddparser/parser').path,
		file('src/scanner/GrammarScanner.jflex').path

	inputs.files 'src/scanner/GrammarScanner.jflex'
	outputs.files 'src/gen/org/jastadd/jastaddparser/parser/GrammarScanner.java'

	doFirst {
		file('src/gen/org/jastadd/jastaddparser/parser').mkdirs()
	}
}

task javadocJar(type: Jar) {
	classifier = 'javadoc'
	from javadoc
}

task sourcesJar(type: Jar) {
	classifier = 'sources'
	from sourceSets.main.allSource
}

artifacts {
	archives javadocJar, sourcesJar
}

signing {
	sign configurations.archives
}

javadoc.options.addStringOption('Xdoclint:none', '-quiet')

uploadArchives {
	repositories.mavenDeployer {
		beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

		repository(url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2') {
			if (project.hasProperty('ossrhUsername')) {
				authentication(userName: ossrhUsername, password: ossrhPassword)
			}
		}

		snapshotRepository(url: 'https://oss.sonatype.org/content/repositories/snapshots') {
			if (project.hasProperty('ossrhUsername')) {
				authentication(userName: ossrhUsername, password: ossrhPassword)
			}
		}

		pom.project {
			name 'JastAddParser'
			packaging 'jar'
			description 'Beaver parser specification preprocessor.'
			url 'http://jastadd.org'
			organization {
				name 'The JastAdd Team'
				url 'http://jastadd.org'
			}
			licenses {
				license {
					name 'Modified BSD License'
					url 'http://opensource.org/licenses/BSD-3-Clause'
					distribution 'repo'
				}
			}
			developers {
				developer {
					name 'Görel Hedin'
					email 'gorel.hedin@cs.lth.se'
				}
				developer {
					name 'Torbjörn Ekman'
				}
				developer {
					name 'Jesper Öqvist'
					email 'jesper.oqvist@cs.lth.se'
				}
				developer {
					name 'Harald Görtz'
				}
			}
			scm {
				connection 'scm:git:https://bitbucket.org/jastadd/jastaddparser.git'
				url 'https://bitbucket.org/jastadd/jastaddparser'
			}
		}
	}
}
