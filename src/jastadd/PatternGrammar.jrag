import java.util.HashSet;
import org.jgrapht.*;
import org.jgrapht.graph.*;
import org.jgrapht.traverse.*;
import org.jgrapht.io.*;
import org.jgrapht.alg.connectivity.*;
import java.io.*;


aspect PatternGrammar {
	syn boolean Grammar.rulesMayBeEmpty(String name) circular [true] {
		for (Rule l : rule(name)) {
			if (l.maybeEmpty()) {
				return true;
			}
		}
		return false;
	}

	inh Grammar Clause.getGrammar();
	eq Grammar.getClause().getGrammar() = this;
	inh Grammar Element.getGrammar();
	inh Grammar Definition.getGrammar();

	syn boolean Definition.maybeEmpty() circular [true] {
		// trivially empty
		if (getNumElement() == 0)
			return true;
		// may be empty if there are no terminals and
		// all the non-terminals may be empty
		for (Element e : getElements()) {
			if (!e.isNonTerminal()) {
				return false;
			} else if (e instanceof OptionalElement
					   || e instanceof ListElement) {
				// skip, Optional and List may be empty
			} else {
				Grammar g = getGrammar();
				if (!g.rulesMayBeEmpty(e.getIdUse().getID()))
					return false;
			}
		}

		return true;
	}

	syn boolean Rule.maybeEmpty() circular [true] {
		for (Definition d : getDefinitions()) {
			if (d.maybeEmpty())
				return true;
		}
		return false;
	}

	syn boolean Element.includes(Rule other) circular [false] {
		if (getIdUse().getID().equals(other.getIdDecl().getID()))
			return true;

		for (Rule l : getGrammar().rule(getIdUse().getID())) {
			if (l.includes(other))
				return true;
		}
		return false;
	}

	inh Definition Element.parentDefinition();
	eq Definition.getElement().parentDefinition() = this;
	inh Rule Definition.parentRule();
	eq Rule.getDefinition().parentRule() = this;

	syn boolean Element.includes(Element other) circular [false] {
		for (Rule r : getGrammar().rule(getIdUse().getID()))
			for (Rule l : getGrammar().rule(other.getIdUse().getID()))
				if (r.includes(l))
					return true;
		return false;
	}

	syn boolean Definition.includes(Rule other) circular [false] {
		String otherName = other.getIdDecl().getID();
		boolean present = false;
		Grammar g = getGrammar();

		for (Element e : getElements()) {
			if (!e.isNonTerminal())
				return false;
			if (e.getIdUse().getID().equals(otherName))
				present = true;
		}

		if (!present)
			return false;

		for (Element e : getElements()) {
			if (!e.includes(other))
				continue;
			// e can clash with other; if the other elements can be empty
			// then this rule can clash with the other rule
			for (Element f : getElements()) {
				if (f != e && !g.rulesMayBeEmpty(f.getIdUse().getID()))
					return false;
			}
		}

		return true;
	}

	syn boolean Definition.isChain() {
		if (getNumElement() != 1)
			return false;
		return getElement(0).isNonTerminal() && !getElement(0).isList();
	}

	syn boolean Definition.isTerminal() {
		for (Element e : getElements())
			if (e.isNonTerminal())
				return false;
		return true;
	}

	syn boolean Rule.isTerminal() {
		for (Definition d : getDefinitions())
			if (!d.isTerminal())
				return false;
		return true;
	}

	syn boolean Element.isTerminal() {
		for (Rule r : getGrammar().rule(getIdUse().getID()))
			if (r.isTerminal())
				return true;
		return false;
	}

	syn String Element.type() {
		for (Rule r : getGrammar().rule(getIdUse().getID()))
			return r.type();
		return null;
	}

	syn boolean Rule.includes(Rule other) circular [false] {
		for (Definition d : getDefinitions()) {
			if (d.includes(other))
				return true;
		}

		// transitive closure
		for (Rule t : getGrammar().rules())
			if (includes(t) && t.includes(other))
				return true;

		return false;
	}

	syn boolean Rule.includes(String other) {
		for (Rule r : getGrammar().rule(other)) {
			if (includes(r))
				return true;
		}
		return false;
	}

	public class GrammarEdgeType {
		private String type;
		private GrammarEdgeType(String type) { this.type = type; }
		public static GrammarEdgeType use() {
			return new GrammarEdgeType("USE");
		}
		public static GrammarEdgeType include() {
			return new GrammarEdgeType("INCLUDE");
		}
		public String toString() { return type; }
		public boolean isUse() { return type.equals("USE"); }
    }

	public Graph<String, GrammarEdgeType> Grammar.buildGrammarGraph() {
		Graph<String, GrammarEdgeType> directedGraph =
            new DefaultDirectedGraph<String, GrammarEdgeType>(GrammarEdgeType.class);

		for (Rule r : rules()) {
			for (Definition d : r.getDefinitions()) {
				for (Element e : d.getElements()) {
					if (!e.isNonTerminal())
						continue;
					directedGraph.addVertex(r.getIdDecl().getID());
					directedGraph.addVertex(e.getIdUse().getID());

					GrammarEdgeType et;
					if (r.includes(e.getIdUse().getID()))
						et = GrammarEdgeType.include();
					else
						et = GrammarEdgeType.use();

					directedGraph.addEdge(r.getIdDecl().getID(), e.getIdUse().getID(), et);
				}
			}
		}

		return directedGraph;
	}

	public static void Grammar.exportGrammarGraph(Graph<String, GrammarEdgeType> g, String file) {
		DOTExporter<String, GrammarEdgeType> exporter = new DOTExporter<String, GrammarEdgeType>
			(new ComponentNameProvider<String>() {
				 @Override public String getName(String t) { return t; }
			 },
			 null, /* vertexLabelProvider */
			 null, /* edgeLabelProvider */
			 null, /* vertexAttributeProvider */
			 new ComponentAttributeProvider<GrammarEdgeType>() {
				 @Override public Map<String, Attribute> getComponentAttributes(GrammarEdgeType e) {
					 return Collections.singletonMap("color",
													 DefaultAttribute.createAttribute(e.isUse() ? "blue" : "red"));
				 }
			 });
		try {
			Writer writer = new FileWriter(file);
			exporter.exportGraph(g, writer);
		} catch (IOException e) {
			System.err.println(e);
		}
	}

	public java.util.List<String> Grammar.getRulePriority() {
		Graph<String, DefaultEdge> directedGraph =
            new DefaultDirectedGraph<String, DefaultEdge>(DefaultEdge.class);

		for (Rule r : rules()) {
			for (Definition d : r.getDefinitions()) {
				for (Element e : d.getElements()) {
					if (e.isNonTerminal()) {
						directedGraph.addVertex(r.getIdDecl().getID());
						directedGraph.addVertex(e.getIdUse().getID());
						directedGraph.addEdge(r.getIdDecl().getID(),
											  e.getIdUse().getID());
					}
				}
			}
		}


		String entry = null;
		for (String v : directedGraph.vertexSet()) {
			if (directedGraph.inDegreeOf(v) == 0) {
				entry = v;
				break;
			}
		}

		System.out.println("Assumed grammar root: " + entry);

		DepthFirstIterator<String, DefaultEdge> it = new DepthFirstIterator<String, DefaultEdge>(directedGraph, entry);

		java.util.List<String> list = new java.util.ArrayList();
		while (it.hasNext()) {
			String v = it.next();
			System.out.println(v);
			list.add(v);
		}

		return list;
	}

	private Rule Grammar.buildMetaVarRule(String name, String type) {
		Rule metaVarRule = new Rule();
		metaVarRule.setIdUse(new IdUse(type));
		metaVarRule.setIdDecl(new IdDecl("META_OR_CONCRETE_" + name));

		{
			Definition originalDef = new Definition();
			originalDef.addElement(new Element(new IdUse(name), new Opt()));
			metaVarRule.addDefinition(originalDef);
		}

		{
			Definition metaVarDef = new Definition();
			Element el = new Element(new IdUse("METAVARID"), new Opt(new IdUse("id")));
			metaVarDef.addElement(el);
			Precedence prec = new Precedence(new IdUse("PREC_1_" + name));
			metaVarDef.addPrecedence(prec);
			String code = String.format("return new MetaVar%s().setVar(new MetaVariable(id));", type);
			metaVarDef.setCODE(code);
			metaVarRule.addDefinition(metaVarDef);
		}

		{
			Definition gapDef = new Definition();
			Element el = new Element(new IdUse("GAP"), new Opt());
			gapDef.addElement(el);
			Precedence prec = new Precedence(new IdUse("PREC_2_" + name));
			gapDef.addPrecedence(prec);
			String code = String.format("return new Gap%s();", type);
			gapDef.setCODE(code);
			metaVarRule.addDefinition(gapDef);
		}

		return metaVarRule;
	}

	public void Rule.insertMetaVarDefinition() {
		{
			Definition metaVarDef = new Definition();
			Element el = new Element(new IdUse("METAVARID"), new Opt(new IdUse("id")));
			metaVarDef.addElement(el);
			Precedence prec = new Precedence(new IdUse("PREC_1_" + getIdDecl().getID()));
			metaVarDef.addPrecedence(prec);
			String code = String.format("return new MetaVar%s().setVar(new MetaVariable(id));",
										getIdUse().getID());
			metaVarDef.setCODE(code);
			addDefinition(metaVarDef);
		}

		{
			Definition gapDef = new Definition();
			Element el = new Element(new IdUse("GAP"), new Opt());
			gapDef.addElement(el);
			Precedence prec = new Precedence(new IdUse("PREC_2_" + getIdDecl().getID()));
			gapDef.addPrecedence(prec);
			String code = String.format("return new Gap%s();",
										getIdUse().getID());
			gapDef.setCODE(code);
			addDefinition(gapDef);
		}
	}

	private Assoc Grammar.buildPrecedenceStmt(String prec, String name) {
		return new Assoc(prec, new List(new IdUse(name)));
	}

	public void Grammar.replaceHeader(String s) {
		for (Clause c : getClauses()) {
			if (c instanceof Header) {
				Header h = (Header)c;
				h.setCODE(s);
			}
		}
		flushAttrCache();
	}

	public void Grammar.addPatternGrammarClauses() {
		ArrayList<Rule> terminalRules = new ArrayList<Rule>();
		ArrayList<Element> nonAliasElems = new ArrayList<Element>();
		java.util.List<String> rulePriority = getRulePriority();
		Set<String> goals = new TreeSet<String>();

		for (Rule r : rules()) {
			if (r.type().equals("List") || r.type().equals("String"))
				continue;
			if (r.isTerminal()) {
				terminalRules.add(r);
			} else {
				for (Definition d : r.getDefinitions()) {
					if (d.isChain())
						continue;
					for (Element e : d.getElements()) {
						if (!e.isNonTerminal())
							continue;
						if (e.isTerminal())
							continue;
						if (e.type().equals("List") || e.type().equals("String"))
							continue;
						nonAliasElems.add(e);
					}
				}
			}
		}

		for (Rule r : terminalRules) {
			r.insertMetaVarDefinition();
			goals.add(r.getIdDecl().getID());
		}

		TreeMap<String, String> metaRules = new TreeMap<String, String>();
		for (Element e : nonAliasElems) {
			metaRules.put(e.getIdUse().getID(), e.type());

			if (!e.hasName()) {
				// explicitly name the element to the name of
				// the original, if it was unnamed; the code might use this name
				e.setName(new IdUse(e.getIdUse().getID()));
			}
			e.setIdUse(new IdUse("META_OR_CONCRETE_" + e.getIdUse().getID()));
		}

		for (Map.Entry<String, String> ruleName : metaRules.entrySet()) {
			String name = ruleName.getKey();
			String type = ruleName.getValue();

			Rule mvr = buildMetaVarRule(name, type);
			addClause(mvr);
			goals.add(mvr.getIdDecl().getID());
		}

		// Exclude the following keywords from goals, because they will clash with the
		// Java language
		java.util.List<String> keywords = java.util.Arrays.asList("super", "finally", "throws");
		for (String goalName : goals) {
			if (!keywords.contains(goalName))
				addClause(new Goal(goalName));
		}

		for (String rule : rulePriority) {
			addClause(buildPrecedenceStmt("nonassoc", "PREC_1_" + rule));
			addClause(buildPrecedenceStmt("nonassoc", "PREC_2_" + rule));
			addClause(buildPrecedenceStmt("nonassoc", "PREC_3_" + rule));

		}

		for (Rule r : rules()) {
			for (Definition d : r.getDefinitions()) {
				for (Element e : d.getElements()) {
					e.flushAttrCache();
				}
				d.flushAttrCache();
			}
			r.flushAttrCache();
		}
		flushAttrCache();
	}

}
