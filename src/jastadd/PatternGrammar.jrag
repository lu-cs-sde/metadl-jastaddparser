import java.util.HashSet;
import org.jgrapht.*;
import org.jgrapht.graph.*;
import org.jgrapht.traverse.*;
import org.jgrapht.io.*;
import org.jgrapht.alg.connectivity.*;
import java.io.*;
import java.util.AbstractMap.SimpleEntry;
import java.util.Collections;
import org.jastadd.jastaddparser.MetaRuleSolver;

aspect PatternGrammar {
  inh Grammar Clause.getGrammar();
  eq Grammar.getClause().getGrammar() = this;
  inh Grammar Element.getGrammar();
  inh Grammar Definition.getGrammar();


  inh Definition Element.parentDefinition();
  eq Definition.getElement().parentDefinition() = this;
  inh Rule Definition.parentRule();
  eq Rule.getDefinition().parentRule() = this;

  syn String Element.type() {
    for (Rule r : getGrammar().rule(getIdUse().getID()))
      return r.type();
    return null;
  }

  private java.util.List<Rule> Grammar.buildMetaVarRule(String name, String type, boolean isMetaVar, boolean isGap) {
    java.util.List<Rule> clauseList = new java.util.ArrayList<Rule>();

    if (isMetaVar) {
      // Original definition and metavar definition
      Rule metaOrConcreteNoGapRule = new Rule();
      metaOrConcreteNoGapRule.setIdUse(new IdUse(type));
      metaOrConcreteNoGapRule.setIdDecl(new IdDecl("META_OR_CONCRETE_NO_GAP_" + name));

      Definition originalDef = new Definition();
      originalDef.addElement(new Element(new IdUse(name), new Opt()));
      metaOrConcreteNoGapRule.addDefinition(originalDef);

      Definition metaVarDef = new Definition();
      Element el = new Element(new IdUse("METAVARID"), new Opt(new IdUse("id")));
      metaVarDef.addElement(el);
      Precedence prec = new Precedence(new IdUse("PREC_1_" + name));
      metaVarDef.addPrecedence(prec);
      String code = String.format("return new MetaVar%s().setVar(new MetaVariable(id));", type);
      metaVarDef.setCODE(code);
      metaOrConcreteNoGapRule.addDefinition(metaVarDef);

      clauseList.add(metaOrConcreteNoGapRule);
    }

    if (isMetaVar && isGap) {
      // Original definition, metavar definition and gaps
      Rule metaOrConcreteRule = new Rule();
      metaOrConcreteRule.setIdUse(new IdUse(type));
      metaOrConcreteRule.setIdDecl(new IdDecl("META_OR_CONCRETE_" + name));

      Definition metaOrConcreteNoGap = new Definition();
      metaOrConcreteNoGap.addElement(new Element(new IdUse("META_OR_CONCRETE_NO_GAP_" + name), new Opt()));
      metaOrConcreteRule.addDefinition(metaOrConcreteNoGap);

      Definition gapDef = new Definition();
      Element el = new Element(new IdUse("GAP"), new Opt());
      gapDef.addElement(el);
      Precedence prec = new Precedence(new IdUse("PREC_2_" + name));
      gapDef.addPrecedence(prec);
      String code = String.format("return new Gap%s();", type);
      gapDef.setCODE(code);
      metaOrConcreteRule.addDefinition(gapDef);

      clauseList.add(metaOrConcreteRule);
    }

    if (isGap && !isMetaVar) {
      // Original definition and gaps
      Rule gapOrConcreteRule = new Rule();
      gapOrConcreteRule.setIdUse(new IdUse(type));
      gapOrConcreteRule.setIdDecl(new IdDecl("GAP_OR_CONCRETE_" + name));

      Definition originalDef = new Definition();
      originalDef.addElement(new Element(new IdUse(name), new Opt()));
      gapOrConcreteRule.addDefinition(originalDef);

      Definition gapDef = new Definition();
      Element el = new Element(new IdUse("GAP"), new Opt());
      gapDef.addElement(el);
      Precedence prec = new Precedence(new IdUse("PREC_2_" + name));
      gapDef.addPrecedence(prec);
      String code = String.format("return new Gap%s();", type);
      gapDef.setCODE(code);
      gapOrConcreteRule.addDefinition(gapDef);

      clauseList.add(gapOrConcreteRule);
    }

    return clauseList;
  }

  private Rule Grammar.buildMetaSymRule(String name) {
    Rule symRule = new Rule();
    symRule.setIdUse(new IdUse("Symbol"));
    symRule.setIdDecl(new IdDecl("META_SYM_" + name));

    Definition def = new Definition();
    def.addElement(new Element(new IdUse(name), new Opt()));

    Definition meta = new Definition();
    meta.addElement(new Element(new IdUse("METAVARID"), new Opt()));

    symRule.addDefinition(def).addDefinition(meta);

    return symRule;
  }

  public boolean Element.canBeMetaSymbol() {
    // TODO: this is hardcoded for the Java grammar
    return name().equals("IDENTIFIER");
  }

  public void Grammar.addPatternGrammarClauses(Set<String> explicitMetaVarSymbols,
                                               Set<String> explicitGapSymbols) {
    ArrayList<Element> metaRuleElems = new ArrayList<Element>();
    Set<Element> gapElems = new HashSet<Element>();
    Set<Element> metaVarElems = new HashSet<Element>();
    java.util.List<Element> metaSymbolElems = new ArrayList<Element>();

    for (Rule r : rules()) {
      for (Definition d : r.getDefinitions()) {
        for (Element e : d.getElements()) {
          // no metavariables for terminals, except..
          if (e.isNonTerminal()) {
            // no metavariables for list or strings
            if (e.type().equals("List") || e.type().equals("String"))
              continue;


            if (explicitMetaVarSymbols == null || explicitMetaVarSymbols.contains(e.name())
                || explicitGapSymbols == null || explicitGapSymbols.contains(e.name())) {
              metaRuleElems.add(e);
            }


            // if there is an explicit list for non-terminals to be replaced
            // with metavars, then skip all non-terminals not in the list
            if (explicitMetaVarSymbols == null || explicitMetaVarSymbols.contains(e.name())) {
              // record element, to replace it with a metavariable element
              metaVarElems.add(e);
            }

            if (r.type().equals("List")) {
              // if the rule is a list, the we want to also allow gaps for
              // the elements
              if (explicitGapSymbols == null || explicitGapSymbols.contains(e.name())) {
                gapElems.add(e);
              }
            }
          } else {
            // ... except some terminals.
            if (e.canBeMetaSymbol()) {
              if (explicitMetaVarSymbols == null || explicitMetaVarSymbols.contains(e.name()))
                metaSymbolElems.add(e);
            }
          }
        }
      }
    }

    // add new rules for metavariables replacing non-terminals
    TreeMap<String, String> metaRules = new TreeMap<String, String>();
    HashSet<String> gaps = new HashSet<>();
    HashSet<String> metavars = new HashSet<>();
    for (Element e : metaRuleElems) {
      metaRules.put(e.getIdUse().getID(), e.type());
      if (!e.hasName()) {
        // explicitly name the element to the name of
        // the original, if it was unnamed; the code might use this name
        e.setName(new IdUse(e.getIdUse().getID()));
      }

      boolean isGapElem = gapElems.contains(e);
      boolean isMetaVarElem = metaVarElems.contains(e);
      String prefix;
      if (isGapElem && isMetaVarElem) {
        prefix = "META_OR_CONCRETE_";
        gaps.add(e.getIdUse().getID());
        metavars.add(e.getIdUse().getID());
      } else if (isGapElem) {
        prefix = "GAP_OR_CONCRETE_";
        gaps.add(e.getIdUse().getID());
      } else if (isMetaVarElem) {
        prefix = "META_OR_CONCRETE_NO_GAP_";
        metavars.add(e.getIdUse().getID());
      } else {
        throw new RuntimeException("An element must be a gap, a metavar, or both.");
      }

      e.setIdUse(new IdUse(prefix + e.getIdUse().getID()));
    }

    for (Map.Entry<String, String> ruleName : metaRules.entrySet()) {
      String name = ruleName.getKey();
      String type = ruleName.getValue();

      java.util.List<Rule> mvrs = buildMetaVarRule(name, type, metavars.contains(name), gaps.contains(name));
      for (Rule mvr : mvrs) {
        addClause(mvr);
      }
    }

    // add new rules for metavariables replacing terminals
    TreeSet<String> metaSymRules = new TreeSet<String>();
    for (Element e : metaSymbolElems) {
      metaSymRules.add(e.getIdUse().getID());
      if (!e.hasName()) {
        // explicitly name the element to the name of
        // the original, if it was unnamed; the code might use this name
        e.setName(new IdUse(e.getIdUse().getID()));
      }
      e.setIdUse(new IdUse("META_SYM_" + e.getIdUse().getID()));
    }

    for (String ruleName : metaSymRules) {
      addClause(buildMetaSymRule(ruleName));
    }

    // flush any existing cached attributes
    for (Rule r : rules()) {
      for (Definition d : r.getDefinitions()) {
        for (Element e : d.getElements()) {
          e.flushAttrCache();
        }
        d.flushAttrCache();
      }
      r.flushAttrCache();
    }
    flushAttrCache();
    flushCollectionCache();
  }

  syn boolean Element.isTrivialChain() {
    if (isOptional())
      return false;
    if (isList())
      return false;
    Definition d = parentDefinition();
    if (d.getCODE() != null && d.getCODE().length() != 0)
      return false;
    if (d.getNumElement() != 1)
      return false;
    return true;
  }

  syn boolean Definition.isTrivialChain() {
    return getNumElement() == 1 && getElement(0).isTrivialChain();
  }

  syn boolean Definition.isMetaVar() {
    if (getNumElement() != 1)
      return false;
    return getElement(0).getIdUse().getID().equals("METAVARID");
  }

  syn Set<Rule> Rule.chainRules() {
    HashSet<Rule> chainedRules = new HashSet<Rule>();
    for (Definition d : getDefinitions()) {
      if (d.isTrivialChain()) {
        String ruleId = d.getElement(0).getIdUse().getID();
        Rule r = getGrammar().ruleByName().get(ruleId);
        chainedRules.add(r);
        chainedRules.addAll(r.chainRules());
      }
    }
    return chainedRules;
  }

  public class HashSetMap<K, V> extends HashMap<K, Set<V>> {
    public void append(Map.Entry<K, V> e) {
      Set<V> s = get(e.getKey());
      if (s == null) {
        s = new HashSet<V>();
        put(e.getKey(), s);
      }
      s.add(e.getValue());
    }
  }

  coll HashSetMap<Rule, Element> Grammar.ruleUses() [new HashSetMap<Rule, Element>()] with append;
  Element contributes
    new SimpleEntry<Rule, Element>(getGrammar().ruleByName().get(getIdUse().getID()), this)
    when isNonTerminal()
    to Grammar.ruleUses();

  syn boolean Rule.hasNonTrivialUses() {
    if (!getGrammar().ruleUses().containsKey(this))
      return false;

    for (Element e : getGrammar().ruleUses().get(this)) {
      if (!e.isTrivialChain())
        return true;
    }
    return false;
  }

  syn boolean Rule.hasMetaVar() {
    for (Definition d : getDefinitions()) {
      if (d.isMetaVar())
        return true;
      if (d.isTrivialChain()) {
        String ruleId = d.getElement(0).getIdUse().getID();
        Rule r = getGrammar().ruleByName().get(ruleId);
        if (r.hasMetaVar())
          return true;
      }
    }
    return false;
  }
}
