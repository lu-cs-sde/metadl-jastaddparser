import java.util.HashSet;
import org.jgrapht.*;
import org.jgrapht.graph.*;
import org.jgrapht.traverse.*;
import org.jgrapht.alg.connectivity.*;

aspect MetaGrammar {
	//syn Set<Rule> Rule.mayAmbiguate() circular [new HashSet<Rule>()];

	syn boolean Grammar.rulesMayBeEmpty(String name) circular [true] {
		for (Rule l : rule(name)) {
			if (l.maybeEmpty()) {
				return true;
			}
		}
		return false;
	}

	inh Grammar Clause.getGrammar();
	eq Grammar.getClause().getGrammar() = this;
	inh Grammar Element.getGrammar();
	inh Grammar Definition.getGrammar();

	syn boolean Definition.maybeEmpty() circular [true] {
		// trivially empty
		if (getNumElement() == 0)
			return true;
		// may be empty if there are no terminals and
		// all the non-terminals may be empty
		for (Element e : getElements()) {
			if (!e.isNonTerminal()) {
				return false;
			} else if (e instanceof OptionalElement
					   || e instanceof ListElement) {
				// skip, Optional and List may be empty
			} else {
				Grammar g = getGrammar();
				if (!g.rulesMayBeEmpty(e.getIdUse().getID()))
					return false;
			}
		}

		return true;
	}

	syn boolean Rule.maybeEmpty() circular [true] {
		for (Definition d : getDefinitions()) {
			if (d.maybeEmpty())
				return true;
		}
		return false;
	}

	syn boolean Element.includes(Rule other) circular [false] {
		for (Rule l : getGrammar().rule(getIdUse().getID())) {
			if (l.includes(other))
				return true;
		}
		return false;
	}

	inh Definition Element.parentDefinition();
	eq Definition.getElement().parentDefinition() = this;
	inh Rule Definition.parentRule();
	eq Rule.getDefinition().parentRule() = this;

	syn boolean Element.isAlias() {
		return parentDefinition().isAlias();
	}

	syn boolean Definition.isAlias() {
		if (getNumElement() != 1)
			return false;
		if (getElement(0) instanceof ListElement ||
			getElement(0) instanceof ListPlusElement)
			return false;
		return true;
	}

	syn boolean Element.includes(Element other) circular [false] {
		for (Rule r : getGrammar().rule(getIdUse().getID()))
			for (Rule l : getGrammar().rule(other.getIdUse().getID()))
				if (r.includes(l))
					return true;
		return false;
	}

	syn boolean Definition.includes(Rule other) circular [false] {
		String otherName = other.getIdDecl().getID();
		boolean present = false;
		Grammar g = getGrammar();

		for (Element e : getElements()) {
			if (!e.isNonTerminal())
				return false;
			if (e.getIdUse().getID().equals(otherName))
				present = true;
		}

		if (!present)
			return false;

		for (Element e : getElements()) {
			if (!e.includes(other))
				continue;
			// e can clash with other; if the other elements can be empty
			// then this rule can clash with the other rule
			for (Element f : getElements()) {
				if (e.includes(f))
					continue;
				if (!g.rulesMayBeEmpty(f.getIdUse().getID()))
					return false;
			}
		}

		return true;
	}



	syn boolean Rule.includes(Rule other) circular [false] {
		if (type().equals("List"))
			return false;

		for (Definition d : getDefinitions()) {
			if (d.includes(other))
				return true;
		}

		// transitive closure
		for (Rule t : getGrammar().rules())
			if (includes(t) && t.includes(other))
				return true;

		return false;
	}

	syn Set<Rule> Rule.allIncludes() {
		Set<Rule> inc = new HashSet<Rule>();
		for (Rule r : getGrammar().rules())
			if (includes(r))
				inc.add(r);
		return inc;
	}

	syn boolean Rule.includes(String other) {
		for (Rule r : getGrammar().rule(other)) {
			if (includes(r))
				return true;
		}
		return false;
	}

	syn boolean Rule.isUnion() {
		for (Definition d : getDefinitions()) {
			if (!d.isAlias())
				return false;
		}
		return true;
	}


	syn boolean Rule.hasMetaOrConcreteDecl() circular [false] {
		if (type().equals("List"))
			return false;

		if (allIncludes().isEmpty()) {
			for (Element e : uses())
				if (!e.isAlias())
					return true;
		} else {
			for (Rule r : allIncludes()) {
				if (r.hasMetaOrConcreteDecl())
					return false;
			}
		}
		return true;
	}

	syn boolean Element.hasMetaOrConcreteDecl() {
		if (!isNonTerminal())
			return false;

		if (this instanceof ListElement ||
			this instanceof ListPlusElement)
			return false;

		for (Rule r : getGrammar().rule(getIdUse().getID()))
			if (r.hasMetaOrConcreteDecl())
				return true;
		return false;
	}

	public java.util.List<String> Grammar.getRulePriority() {
		Graph<String, DefaultEdge> directedGraph =
            new DefaultDirectedGraph<String, DefaultEdge>(DefaultEdge.class);
		for (Rule r : rules()) {
			directedGraph.addVertex(r.getIdDecl().getID());
		}
		for (Rule r : rules()) {
			for (Rule l : rules()) {
				if (r.includes(l)) {
					directedGraph.addEdge(r.getIdDecl().getID(),
										  l.getIdDecl().getID());
				}
			}
		}

		KosarajuStrongConnectivityInspector<String, DefaultEdge> sccAlg = new KosarajuStrongConnectivityInspector(directedGraph);
		TopologicalOrderIterator<Graph<String, DefaultEdge>, DefaultEdge> top = new TopologicalOrderIterator(sccAlg.getCondensation());

		java.util.List<String> list = new java.util.ArrayList();
		while (top.hasNext()) {
			Graph<String, DefaultEdge> scc = top.next();
			if (scc.vertexSet().size() == 1)
				list.add(scc.vertexSet().iterator().next());

		}
		return list;
	}

	private Rule Grammar.buildMetaVarRule(Rule r) {
		Rule metaVarRule = new Rule();
		metaVarRule.setIdUse(r.getIdUse().treeCopyNoTransform());
		metaVarRule.setIdDecl(new IdDecl("META_OR_CONCRETE_" + r.getIdDecl().getID()));

		{
			Definition originalDef = new Definition();
			originalDef.addElement(new Element(new IdUse(r.getIdDecl().getID()), new Opt()));
			metaVarRule.addDefinition(originalDef);
		}

		{
			Definition metaVarDef = new Definition();
			Element el = new Element(new IdUse("METAVARID"), new Opt(new IdUse("id")));
			metaVarDef.addElement(el);
			Precedence prec = new Precedence(new IdUse("PREC_1_" + r.getIdDecl().getID()));
			metaVarDef.addPrecedence(prec);
			String code = String.format("return new MetaVar%s().setVar(new MetaVariable(id));",
										r.getIdUse().getID());
			metaVarDef.setCODE(code);
			metaVarRule.addDefinition(metaVarDef);
		}

		// {
		// 	Definition indexVarDef = new Definition();
		// 	indexVarDef.addElement(new Element(new IdUse("METAVARID"), new Opt(new IdUse("idx"))));
		// 	indexVarDef.addElement(new Element(new IdUse("COLON"), new Opt()));
		// 	indexVarDef.addElement(new Element(new IdUse("METAVARID"), new Opt(new IdUse("id"))));
		// 	Precedence prec = new Precedence(new IdUse("PREC_2_" + r.getIdDecl().getID()));
		// 	indexVarDef.addPrecedence(prec);
		// 	String code = String.format("return new IndexMetaVar%s().setVar(new MetaVariable(idx)).setElement(new MetaVar%s().setVar(new MetaVariable(id)));", r.getIdUse().getID(), r.getIdUse().getID());
		// 	indexVarDef.setCODE(code);
		// 	metaVarRule.addDefinition(indexVarDef);
		// }

		// {
		// 	Definition indexVarDef = new Definition();
		// 	// indexVarDef.addElement(new Element(new IdUse("LPARAN"), new Opt()));
		// 	indexVarDef.addElement(new Element(new IdUse("METAVARID"), new Opt(new IdUse("idx"))));
		// 	indexVarDef.addElement(new Element(new IdUse("COLON"), new Opt()));
		// 	indexVarDef.addElement(new Element(new IdUse(r.getIdDecl().getID()), new Opt(new IdUse("id"))));
		// 	// indexVarDef.addElement(new Element(new IdUse("RPARAN"), new Opt()));
		// 	Precedence prec = new Precedence(new IdUse("PREC_3_" + r.getIdDecl().getID()));
		// 	indexVarDef.addPrecedence(prec);
		// 	String code = String.format(" return new IndexMetaVar%s().setVar(new MetaVariable(idx)).setElement(id);",
		// 								 r.getIdUse().getID());
		// 	indexVarDef.setCODE(code);
		// 	metaVarRule.addDefinition(indexVarDef);
		// }

		{
			Definition gapDef = new Definition();
			Element el = new Element(new IdUse("GAP"), new Opt());
			gapDef.addElement(el);
			Precedence prec = new Precedence(new IdUse("PREC_4_" + r.getIdDecl().getID()));
			gapDef.addPrecedence(prec);
			String code = String.format("return new Gap%s();",
										r.getIdUse().getID());
			gapDef.setCODE(code);
			metaVarRule.addDefinition(gapDef);
		}


		return metaVarRule;
	}

	private Assoc Grammar.buildPrecedenceStmt(String prec, String name) {
		return new Assoc(prec, new List(new IdUse(name)));
	}

	public void Grammar.replaceHeader(String s) {
		for (Clause c : getClauses()) {
			if (c instanceof Header) {
				Header h = (Header)c;
				h.setCODE(s);
			}
		}
		flushAttrCache();
	}

	public void Grammar.addPatternGrammarClauses() {
		TreeSet<Rule> metaRules = new TreeSet<Rule>(new Comparator<Rule>() {
				public int compare(Rule r1, Rule r2) {
					return r1.getIdDecl().getID().compareTo(r2.getIdDecl().getID());
				}
			});
		java.util.List<Element> metaElems = new java.util.ArrayList<Element>();
		Set<String> goals = new TreeSet<String>();

		for (Rule r : rules()) {
			for (Definition d : r.getDefinitions()) {
				for (Element e : d.getElements()) {
					if (!e.hasMetaOrConcreteDecl() || (e.isAlias() && !r.type().equals("List")))
						continue;
					metaElems.add(e);
				}
			}
			if (r.hasMetaOrConcreteDecl()) {
				metaRules.add(r);
			}
			if (!r.type().equals("ASTNode") && !r.type().equals("ASTList"))
				goals.add(r.getIdDecl().getID());
		}

		for (String goalName : goals) {
			addClause(new Goal(goalName));
		}

		for (Element e : metaElems) {
			e.setIdUse(new IdUse("META_OR_CONCRETE_" + e.getIdUse().getID()));
		}

		for (Rule r : metaRules) {
			Rule mvr = buildMetaVarRule(r);
			addClause(mvr);
		}

		for (String rule : getRulePriority()) {
			addClause(buildPrecedenceStmt("nonassoc", "PREC_1_" + rule));
			addClause(buildPrecedenceStmt("nonassoc", "PREC_2_" + rule));
			addClause(buildPrecedenceStmt("nonassoc", "PREC_3_" + rule));
			addClause(buildPrecedenceStmt("nonassoc", "PREC_4_" + rule));
		}


		for (Rule r : rules()) {
			for (Definition d : r.getDefinitions()) {
				for (Element e : d.getElements()) {
					e.flushAttrCache();
				}
				d.flushAttrCache();
			}
			r.flushAttrCache();
		}
		flushAttrCache();
	}

}
