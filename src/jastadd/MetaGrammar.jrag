import java.util.HashSet;
import org.jgrapht.*;
import org.jgrapht.graph.*;
import org.jgrapht.traverse.*;

aspect MetaGrammar {
	//syn Set<Rule> Rule.mayAmbiguate() circular [new HashSet<Rule>()];

	syn boolean Grammar.rulesMayBeEmpty(String name) circular [true] {
		for (Rule l : rule(name)) {
			if (l.maybeEmpty()) {
				return true;
			}
		}
		return false;
	}

	inh Grammar Clause.getGrammar();
	eq Grammar.getClause().getGrammar() = this;
	inh Grammar Element.getGrammar();
	inh Grammar Definition.getGrammar();

	syn boolean Definition.maybeEmpty() circular [true] {
		// trivially empty
		if (getNumElement() == 0)
			return true;
		// may be empty if there are no terminals and
		// all the non-terminals may be empty
		for (Element e : getElements()) {
			if (!e.isNonTerminal()) {
				return false;
			} else if (e instanceof OptionalElement
					   || e instanceof ListElement) {
				// skip, Optional and List may be empty
			} else {
				Grammar g = getGrammar();
				if (!g.rulesMayBeEmpty(e.getIdUse().getID()))
					return false;
			}
		}

		return true;
	}

	syn boolean Rule.maybeEmpty() circular [true] {
		for (Definition d : getDefinitions()) {
			if (d.maybeEmpty())
				return true;
		}
		return false;
	}

	syn boolean Element.mayAmbiguate(Rule other) circular [false] {
		for (Rule l : getGrammar().rule(getIdUse().getID())) {
			if (l.mayAmbiguate(other))
				return true;
		}
		return false;
	}

	syn boolean Element.mayAmbiguate(Element other) circular [false] {
		for (Rule r : getGrammar().rule(getIdUse().getID()))
			for (Rule l : getGrammar().rule(other.getIdUse().getID()))
				if (r.mayAmbiguate(l))
					return true;
		return false;
	}

	syn boolean Definition.mayAmbiguate(Rule other) circular [false] {
		String otherName = other.getIdDecl().getID();
		boolean present = false;
		Grammar g = getGrammar();

		for (Element e : getElements()) {
			if (!e.isNonTerminal())
				return false;
			if (e.getIdUse().getID().equals(otherName))
				present = true;
		}

		if (!present)
			return false;

		for (Element e : getElements()) {
			if (!e.mayAmbiguate(other))
				continue;
			// e can clash with other; if the other elements can be empty
			// then this rule can clash with the other rule
			for (Element f : getElements()) {
				if (e.mayAmbiguate(f))
					continue;
				if (!g.rulesMayBeEmpty(f.getIdUse().getID()))
					return false;
			}
		}

		return true;
	}

	syn boolean Rule.mayAmbiguate(Rule other) circular [false] {
		for (Definition d : getDefinitions()) {
			if (d.mayAmbiguate(other))
				return true;
		}

		return false;
	}

	syn boolean Rule.isAmbigous() {
		for (Rule l : getGrammar().rules())
			if (mayAmbiguate(l))
				return true;
		return false;
	}

	syn List<Clause> Grammar.getMetaVariableClausesList() {
		List<Clause> clauseList = new List<Clause>();
		for (Rule r : rules()) {
			if (!r.isAmbigous())
				clauseList.add(r);
		}
		return clauseList;
	}

	public Iterator<String> Grammar.getRulePriority() {
		Graph<String, DefaultEdge> directedGraph =
            new DefaultDirectedGraph<String, DefaultEdge>(DefaultEdge.class);
		for (Rule r : rules()) {
			directedGraph.addVertex(r.getIdDecl().getID());
		}
		for (Rule r : rules()) {
			for (Rule l : rules()) {
				if (r.mayAmbiguate(l)) {
					directedGraph.addEdge(r.getIdDecl().getID(),
										  l.getIdDecl().getID());
				}
			}
		}

		java.util.Set<String> unambigousRules = new TreeSet<String>();

		for (Rule r : rules()) {
			if (!r.isAmbigous())
				unambigousRules.add(r.getIdDecl().getID());
		}

		// Iterator<String> it = unambigousRules.iterator();
		// if (it.hasNext()) {
		// 	String current = it.next();
		// 	while (it.hasNext()) {
		// 		String next = it.next();
		// 		directedGraph.addVertex(current);
		// 		directedGraph.addVertex(next);
		// 		directedGraph.addEdge(current, next);
		// 	}
		// }

		return new TopologicalOrderIterator<String, DefaultEdge>(directedGraph);
	}

	private Rule Grammar.buildMetaVarRule(Rule r) {
		Rule metaVarRule = new Rule();
		metaVarRule.setIdUse(r.getIdUse().treeCopyNoTransform());
		metaVarRule.setIdDecl(r.getIdDecl().treeCopyNoTransform());

		Definition metaVarDef = new Definition();
		Element el = new Element(new IdUse("METAVARID"), new Opt(new IdUse("id")));
		metaVarDef.addElement(el);
		Precedence prec = new Precedence(new IdUse("PREC_" + r.getIdDecl().getID()));
		metaVarDef.addPrecedence(prec);

		String code = String.format("MetaVar%s tmp = new MetaVar%s(); l.setVar(new MetaVariable(id)); return l;",
									r.getIdUse().getID(), r.getIdUse().getID());
		metaVarDef.setCODE(code);
		metaVarRule.addDefinition(metaVarDef);

		return metaVarRule;
	}

	private Assoc Grammar.buildPrecedenceStmt(Rule r) {
		return new Assoc("nonassoc",
						 new List(new IdUse("PREC_" + r.getIdDecl().getID())));
	}

	public void Grammar.addPatternGrammarClauses() {
		HashSet<String> modifiedProductions = new HashSet<String>();
		java.util.List<Rule> metaVarRules = new java.util.ArrayList<Rule>();
		Map<String, Assoc> precendences = new HashMap<String, Assoc>();

		for (Rule r : rules()) {
			if (!r.isAmbigous())
				continue;

			if (modifiedProductions.contains(r.getIdDecl().getID()))
				continue;
			modifiedProductions.add(r.getIdDecl().getID());
			if (r.type().equals("ASTNode"))
				continue;
			if (r.type().equals("List"))
				continue;

			metaVarRules.add(buildMetaVarRule(r));
			precendences.put(r.getIdDecl().getID(), buildPrecedenceStmt(r));
		}

		getClauses().addAll(metaVarRules);

		Iterator<String> rulePri = getRulePriority();
		while (rulePri.hasNext()) {
			Assoc a = precendences.get(rulePri.next());
			if (a != null)
				addClause(a);
		}

		flushAttrCache();
	}

}
