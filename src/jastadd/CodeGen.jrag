/* Copyright (c) 2005-2008, Torbjorn Ekman
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the copyright holder nor the names of its
 * contributors may be used to endorse or promote products derived from this
 * software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

import java.util.Iterator;
import java.io.PrintStream;
import java.util.regex.Pattern;
import java.util.regex.Matcher;

/**
 * Aspect methods for generating Beaver specification code.
 */
aspect CodeGen {
  /**
   * The input file passed to JastAddParser.
   */
  public static String ASTNode.sourceName = "";

  /**
   * Print stream for generating the output code.
   */
  protected static PrintStream ASTNode.out;

  /**
   * This is {@code true} if the parser should generate
   * beaver Symbol nodes in the generated semantic actions.
   */
  protected static boolean ASTNode.noBeaverSymbol;
  
  /**
   * This is {@code true} if the parser should use
   * Tokenlist for the jastadd-synthesizer
   */
  protected static boolean ASTNode.useTokenlist;
  

  protected static void ASTNode.print(String s) {
    out.print(s);
  }

  protected static void ASTNode.println(String s) {
    // Only use newline, not system dependent line terminator.
    out.print(s);
    out.print('\n');
  }

  protected static void ASTNode.format(String format, Object... args) {
    out.format(format, args);
  }

  public void ASTNode.genCode() {
  }

  public void Grammar.genCode(PrintStream out, boolean noBeaverSymbol, boolean useTokenlist) {
    ASTNode.out = out;
    ASTNode.noBeaverSymbol = noBeaverSymbol;
    ASTNode.useTokenlist = useTokenlist;
    for (Clause clause : getClauseList()) {
      if (clause instanceof Declaration) {
        clause.genCode();
      }
    }
    for (String terminal : terminals()) {
      format("%%terminals %s;\n", terminal);
    }
    for (String name : ruleNames()) {
      boolean genOpt = false;
      boolean genOptList = false;
      boolean genList = false;
      String typeName = "";
      for (Rule rule : rule(name)) {
        genOpt = genOpt || rule.genOpt();
        genOptList = genOptList || rule.genOptList();
        genList = genList || rule.genList();
        typeName = rule.type();
      }
      format("%%typeof %s = \"%s\";\n", name, typeName);
      if (genOpt) {
        Rule rule = nonTerminal(name);
        if (rule != null && rule.type().equals("List")) {
          format("%%typeof %s_opt = \"List\";\n", name);
        } else {
          format("%%typeof %s_opt = \"Opt\";\n", name);
        }
      }
      if (genOptList) {
        format("%%typeof %s_opt_list = \"List\";\n", name);
      }
      if (genList) {
        format("%%typeof %s_list = \"List\";\n", name);
      }
    }
    String defaultGoal = null;
    Collection<String> goals = new ArrayList<String>();
    for (Clause clause : getClauseList()) {
      if (defaultGoal == null && (clause instanceof Rule)) {
        defaultGoal = ((Rule) clause).name();
      }
      if (clause instanceof Goal) {
        goals.add(((Goal) clause).getName());
      }
    }
    if (goals.isEmpty()) {
      goals.add(defaultGoal);
    }
    for (String goal : goals) {
      format("%%goal %s;\n", goal);
    }
    for (Rule rule : rules()) {
      rule.genCode();
    }

    // Generate _opt, _opt_list, _list constructs.
    for (String name : ruleNames()) {
      boolean genOpt = false;
      boolean genOptList = false;
      boolean genList = false;
      String typeName = "";
      for (Rule rule : rule(name)) {
        if (rule.genOpt()) {
          genOpt = true;
        }
        if (rule.genOptList()) {
          genOptList = true;
        }
        if (rule.genList()) {
          genList = true;
        }
        typeName = rule.type();
      }
      if (genOpt) {
        Rule rule = rule(name).get(0);
        if (rule.type().equals("List")) {
          println(name + "_opt =");
          printReturn("new List()");
          println("  | " + name + ".n");
          printReturn("n", "n", "n");
          println("  ;");
        } else if (rule.type().equals("Opt")) {
          println(name + "_opt =");
          printReturn("new Opt()");
          println("  | " + name + ".n");
          printReturn("n", "n", "n");
          println("  ;");
        } else {
          println(name + "_opt =");
          printReturn("new Opt()");
          println("  | " + name + ".n");
          printReturn("new Opt(n)", "n", "n");
          println("  ;");
        }
      }
      if (genOptList) {
        println(name + "_opt_list =");
        printReturn("new List()");
        println("  | " + name + "_list.n");
        printReturn("n", "n", "n");
        println("  ;");
      }
      if (genList) {
        println(name + "_list =");
        println("  " + name + ".n");
        printReturn("new List().add(n)", "n", "n");
        println("  | " + name + "_list.l " + name + ".n");
        printReturn("l.add(n)", "l", "n");
        println("  ;");
      }
    }
  }

  /**
   * Generates the semantic action code for a single production.
   */
  private void Grammar.printReturn(String returnVal, String alias1, String alias2) {
    if (noBeaverSymbol) {
      format("  {: ASTNode _node_ = %s;\n", returnVal);
		if(useTokenlist){
			println("	Object first = _symbol_" + alias1 + ".value;");
			println("	Object last = _symbol_" + alias2 + ".value;");
			println("  	if(first instanceof Token){");
			println("		_node_.setStartToken((Token) first);");
			println("  	} else {");
			println("  		ASTNode fn = (ASTNode) first;");
			println("  		_node_.setStartToken(fn.getStartToken());");
			println("  	}");
			println("  	if(last instanceof Token){");
			println("  		_node_.setEndToken((Token) last);");
			println("  	} else {");
			println(" 		ASTNode ln = (ASTNode) last;");
			println("  		_node_.setEndToken(ln.getEndToken());");
			println("  	}");
		}
      println("   _node_.setStart(Symbol.getLine(_symbol_" + alias1 +
          ".getStart()), (short) Symbol.getColumn(_symbol_" + alias1 +".getStart()));");
      println("   _node_.setEnd(Symbol.getLine(_symbol_" + alias2 +
          ".getEnd()), (short) Symbol.getColumn(_symbol_" + alias2 + ".getEnd()));");
      println("   return new Symbol(_node_); :}");
    } else {
      format("  {: return %s; :}\n", returnVal);
    }
  }

  private void Grammar.printReturn(String returnVal) {
    if (noBeaverSymbol) {
      format("    {: return new Symbol(%s); :}\n", returnVal);
    } else {
      format("  {: return %s; :}\n", returnVal);
    }
  }

  public void Header.genCode() {
    format("%%header {: // Generated from %s\n%s :};\n", ASTNode.sourceName, getCODE());
  }

  public void ClassCode.genCode() {
    format("%%embed {: // Generated from %s\n%s :};\n", ASTNode.sourceName, getCODE());
  }

  public void Assoc.genCode() {
    format("%%%s ", getASSOC());
    boolean first = true;
    for (IdUse sym : getSymbolList()) {
      if (!first) {
        print(", ");
      }
      first = false;
      print(sym.getID());
    }
    println(";");
  }

  public void Rule.genCode() {
    if (replaced()) {
      return;
    }
    println(name() + " =");
    print("    ");
    for (int i = 0; i < getNumDefinition(); i++) {
      if (i != 0) {
        print("\n  | ");
      }
      getDefinition(i).genCode();
    }
    println("  ;");
  }

  inh boolean Element.inlineOptional();

  // TODO: describe what this does!
  eq Definition.getElement(int index).inlineOptional() {
    Element element = getElement(index);
    if (element.isOptional() || element.isList()) {
      if (index == 0) {
        return true;
      }
      Element prev = getElement(index - 1);
      if (prev.isNonTerminal() || prev.isOptional()) {
        return true;
      }
      if (index < getNumElement() - 1) {
        Element next = getElement(index + 1);
        return next.isNonTerminal() || next.isOptional();
      }
    }
    return false;
  }

  syn lazy boolean Definition.inlineLeft(int index) =
      getElement(index).isOptional()
      && (index == 0 || getElement(index - 1).isOptional());

  syn lazy boolean Definition.inlineRight(int index) =
      getElement(index).isOptional()
      && (index == getNumElement() - 1 || getElement(index + 1).isOptional());

  syn lazy int Definition.permutations() {
    int num = 1;
    for (int i = 0; i < getNumElement(); i++) {
      if (getElement(i).inlineOptional()) {
        num *= 2;
      }
    }
    return num;
  }

  public void Definition.genCode() {
    for (int j = 0; j < permutations(); j++) {
      int optIndex = 1;
      int firstElementIndex = 0;
      int lastElementIndex = -1;
      LinkedList names = new LinkedList();
      if (j != 0) {
        format("\n  | ");
      }
      for (int i = 0; i < getNumElement(); i++) {
        if (getElement(i).inlineOptional()) {
          if ((j & optIndex) != 0) {
            getElement(i).genCode();
            print(" ");
            lastElementIndex = i;
          } else if (i == firstElementIndex) {
            firstElementIndex++;
          }
          optIndex *= 2;
        } else {
          getElement(i).genCode();
          print(" ");
          lastElementIndex = i;
        }
      }
      if (getNumPrecedence() > 0) {
        print("@ ");
        for (Precedence prec : getPrecedenceList()) {
          prec.getIdUse().genCode();
          print(" ");
        }
      }
      if (getCODE() != null && !getCODE().equals("")) {
        String code = getCODE();
        optIndex = 1;
        for (int i = 0; i < getNumElement(); i++) {
          if (getElement(i).inlineOptional() && getElement(i).isNonTerminal()) {
            String name = getElement(i).alias();
            // The char before must be one of " ", "(", ")", ",".
            // The char after must be one of " ", "," ")", ".".
            String pattern = "([ (),=+])(" + name + ")([ ,)\\.+=;])";
            Pattern p = Pattern.compile(pattern);
            Matcher matcher = p.matcher(code);
            StringBuffer sb = new StringBuffer();
            while (matcher.find()) {
              String returnType = getElement(i).rule().type();
              String elementType = getElement(i).isOptional() ? "Opt" : "List";
              if ((j & optIndex) != 0) {
                if (returnType.equals("Opt") || returnType.equals("List")
                    || elementType.equals("List")) {
                  matcher.appendReplacement(sb, "$1$2$3");
                } else {
                  matcher.appendReplacement(sb, "$1new Opt($2)$3");
                }
              } else {
                if (returnType.equals("List")) {
                  matcher.appendReplacement(sb, "$1new List()$3");
                } else if (returnType.equals("Opt")) {
                  matcher.appendReplacement(sb, "$1new Opt()$3");
                } else {
                  matcher.appendReplacement(sb, "$1new " + elementType + "()$3");
                }
              }
            }
            matcher.appendTail(sb);
            code = sb.toString();
          } else if (!getElement(i).isNonTerminal()) {
            String name = getElement(i).alias();
            // The char before must be one of " ", "(", ")", ",".
            // The char after must be one of " ", "," ")", ".".
            Pattern pattern = Pattern.compile("([ (),=+])(" + name + ")([ ,)\\.+=;])");
            Matcher matcher = pattern.matcher(code);
            StringBuffer sb = new StringBuffer();
            while (matcher.find()) {
              if (Character.isUpperCase(name.charAt(0)) && !noBeaverSymbol) {
                matcher.appendReplacement(sb, "$1$2$3");
              } else {
              	if(useTokenlist){
					matcher.appendReplacement(sb, "$1(((Token)$2.value).getValue())$3");
					names.add(name);
				} else {
					matcher.appendReplacement(sb, "$1((String)$2.value)$3");
				}	
              }
            }
            matcher.appendTail(sb);
            code = sb.toString();
          }
          if (getElement(i).inlineOptional()) {
            optIndex *= 2;
          }
        }

        if (noBeaverSymbol) {
          Pattern pattern = Pattern.compile("return ([^;]*?);");
          Matcher matcher = pattern.matcher(code);
          StringBuffer sb = new StringBuffer();
          while (matcher.find()) {
            if (firstElementIndex <= lastElementIndex) {
              matcher.appendReplacement(sb, "ASTNode _node_ = $1;\n");
              String firstNamePrefix = "";
              String lastNamePrefix = "";
              if (getElement(firstElementIndex).isNonTerminal()) {
                firstNamePrefix = "_symbol_";
              }
              if (getElement(lastElementIndex).isNonTerminal()) {
                lastNamePrefix = "_symbol_";
              }
              if(useTokenlist){
				if(names.size() > 0){
					sb.append("				String[] tokenNames = _node_.getTokens();\n");
					for(int i = 0; i < names.size(); i++){
						sb.append("				_node_.addToken(tokenNames[");
						sb.append(i);
						sb.append("], (SignificantToken) ");
						sb.append(names.get(i));
						sb.append(".value);\n");
					}
				}
					sb.append("	Object first = " + firstNamePrefix + getElement(firstElementIndex).alias() + ".value;\n");
					sb.append("	Object last = " + lastNamePrefix + getElement(lastElementIndex).alias() + ".value;\n");
								
				if(getElement(firstElementIndex).isNonTerminal()){
					sb.append("  		ASTNode fn = (ASTNode) first;\n");
					sb.append("  		_node_.setStartToken(fn.getStartToken());\n");
				} else {
					sb.append("			_node_.setStartToken((Token) first);\n");
				}
								
				if(getElement(lastElementIndex).isNonTerminal()){
					sb.append(" 		ASTNode ln = (ASTNode) last;\n");
					sb.append("  		_node_.setEndToken(ln.getEndToken());\n");
				} else {
					sb.append("  		_node_.setEndToken((Token) last);\n");
				}
			  }
              sb.append("      _node_.setStart(Symbol.getLine(").append(firstNamePrefix);
              sb.append(getElement(firstElementIndex).alias()).append(".getStart()), ");
              sb.append("(short) Symbol.getColumn(").append(firstNamePrefix);
              sb.append(getElement(firstElementIndex).alias()).append(".getStart()));\n");
              sb.append("      _node_.setEnd(Symbol.getLine(").append(lastNamePrefix);
              sb.append(getElement(lastElementIndex).alias()).append(".getEnd()), ");
              sb.append("(short) Symbol.getColumn(").append(lastNamePrefix);
              sb.append(getElement(lastElementIndex).alias()).append(".getEnd()));\n");
              sb.append("      return new Symbol(_node_);");
            } else {
              matcher.appendReplacement(sb, "return new Symbol($1);");
            }
          }
          matcher.appendTail(sb);
          code = sb.toString();
        }

        format("{: %s :}\n", code);
      }
    }
  }

  public void Element.genCode() {
    print(name());
    if (alias() != null) {
      print("." + alias());
    }
  }

  public void OptionalElement.genCode() {
    if (isNonTerminal()) {
      if (inlineOptional()) {
        print(name());
      } else {
        print(name() +"_opt");
      }
      if (alias() != null) {
        print("." + alias());
      }
    } else {
      print(name());
      if (alias() != null) {
        print("." + alias());
      }
      if (!inlineOptional()) {
        print("?");
      }
    }
  }

  public void ListPlusElement.genCode() {
    if (isNonTerminal()) {
      print(name() + "_list");
      if (alias() != null) {
        print("." + alias());
      }
    } else {
      print(name());
      if (alias() != null) {
        print("." + alias());
      }
      print("+");
    }
  }

  public void ListElement.genCode() {
    if (isNonTerminal()) {
      if (inlineOptional()) {
        print(name() + "_list");
      } else {
        print(name() + "_opt_list");
      }
      if (alias() != null) {
        print("." + alias());
      }
    } else {
      print(name());
      if (alias() != null) {
        print("." + alias());
      }
      print("*");
    }
  }

  public void IdUse.genCode() {
    print(getID());
  }

  public void IdDecl.genCode() {
    print(getID());
  }

  syn lazy boolean Rule.genOpt() {
    for (Element e : uses()) {
      if (e.genOpt()) {
        return true;
      }
    }
    return false;
  }

  syn lazy boolean Rule.genOptList() {
    for (Element e : uses()) {
      if (e.genOptList()) {
        return true;
      }
    }
    return false;
  }

  syn lazy boolean Rule.genList() {
    for (Element e : uses()) {
      if (e.genList()) {
        return true;
      }
    }
    return false;
  }

  syn boolean Element.genOpt() = false;
  eq OptionalElement.genOpt() = !inlineOptional();

  syn boolean Element.genOptList() = false;
  eq ListElement.genOptList() = !inlineOptional();

  syn boolean Element.genList() = false;
  eq ListElement.genList() = true;
  eq ListPlusElement.genList() = true;
}
