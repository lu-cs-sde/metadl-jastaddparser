/* Copyright (c) 2005-2008, Torbjorn Ekman
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the copyright holder nor the names of its
 * contributors may be used to endorse or promote products derived from this
 * software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.Set;
import java.util.LinkedHashSet;
import java.util.ArrayList;
import java.util.Set;

aspect NameChecking {
  protected void ASTNode.nameCheck() {
  }

  protected void Grammar.nameCheck() {
    if (explicitGoals().isEmpty()) {
      java.util.List<Rule> rules = rule(firstGoal());
      if (!rules.isEmpty()) {
        Rule rule = rules.get(0);
        rule.warning("No explicit goals in grammar; will use \"" + firstGoal() + "\"");
      }
    }
    for (Goal goal : explicitGoals()) {
      if (rule(goal.getName()).isEmpty()) {
        goal.error("Goal " + goal.getName() + " is not defined");
      }
    }
  }

  protected void Rule.nameCheck() {
    if (Character.isUpperCase(name().charAt(0))) {
      error("Non-terminals must start with a lower case letter: " + name());
    }
  }

  protected void Element.nameCheck() {
    if (findAlias(alias()) != this) {
      error("Element name " + alias() + " is used multiple times");
    }
    if (Character.isLowerCase(name().charAt(0)) && !isNonTerminal() && !name().equals("error")) {
      error("Non-terminal " + name() + " is not defined");
    }
  }
}

aspect NameBinding {

  inh boolean Rule.isGoal();

  eq Grammar.getClause(int index).isGoal() {
    if (getClause(index) instanceof Rule) {
      Rule rule  = (Rule) getClause(index);
      return goal(rule.name()) != null || rule.name().equals(firstGoal());
    }
    return false;
  }

  syn lazy String Grammar.firstGoal() {
    for (int i = 0; i < getNumClause(); i++) {
      if (getClause(i) instanceof Rule) {
        return ((Rule) getClause(i)).name();
      }
    }
    return null;
  }

  syn lazy Set<Goal> Grammar.explicitGoals() {
    Set<Goal> set = new HashSet<Goal>();
    for (int i = 0; i < getNumClause(); i++) {
      if (getClause(i) instanceof Goal) {
        set.add((Goal) getClause(i));
      }
    }
    return set;
  }

  syn lazy Goal Grammar.goal(String name) {
    for (Goal goal : explicitGoals()) {
      if (goal.getName().equals(name)) {
        return goal;
      }
    }
    return null;
  }

  syn lazy String Element.name() = getIdUse().getID();
  syn lazy String Rule.name() = getIdDecl().getID();
  syn lazy String Rule.type() = hasIdUse() ? getIdUse().getID() : "ASTNode";

  inh Element Element.findAlias(String alias);
  eq Definition.getElement(int index).findAlias(String alias) {
    for (int i = 0; i < getNumElement(); i++) {
      if (getElement(i).alias().equals(alias)) {
        return getElement(i);
      }
    }
    return null;
  }

  syn lazy String Element.alias() circular [hasName() ? getName().getID() : name()] {
    if (hasName()) {
      return getName().getID();
    }
    if (codeString() != null && codeString().indexOf(name()) != -1) {
      return name();
    }
    String alias = alias();
    if (findAlias(alias) != this) {
      return alias + "_";
    }
    return alias;
  }

  inh String Element.codeString();
  eq Definition.getElement().codeString() = getCODE();

  syn lazy Map<String, Set<Element>> Grammar.uses() {
    Map<String, Set<Element>> map = new HashMap<String, Set<Element>>();
    findUses(map);
    return map;
  }

  protected void ASTNode.findUses(Map<String, Set<Element>> map) {
    for (int i = 0; i < getNumChild(); i++) {
      getChild(i).findUses(map);
    }
  }

  protected void Element.findUses(Map<String, Set<Element>> map) {
    Set<Element> set = map.get(name());
    if (!map.containsKey(name())) {
      set = new HashSet<Element>();
      map.put(name(), set);
    }
    set.add(this);
  }

  inh lazy Set<Element> Rule.uses(String name);

  eq Grammar.getClause().uses(String name) =
      uses().containsKey(name) ? uses().get(name) : Collections.<Element>emptySet();

  syn Set<Element> Rule.uses() = uses(name());

  syn lazy boolean Element.isNonTerminal() = isNonTerminal(name());

  inh boolean Element.isNonTerminal(String name);

  eq Grammar.getClause().isNonTerminal(String name) = isNonTerminal(name);

  syn lazy boolean Grammar.isNonTerminal(String name) {
    for (Rule rule : rules()) {
      if (rule.name().equals(name)) {
        return true;
      }
    }
    return false;
  }

  syn lazy Rule Element.rule() = nonTerminal(name());

  inh Rule Element.nonTerminal(String name);

  eq Grammar.getClause().nonTerminal(String name) = nonTerminal(name);

  syn lazy Rule Grammar.nonTerminal(String name) {
    for (Rule rule : rules()) {
      if (rule.name().equals(name)) {
        return rule;
      }
    }
    return null;
  }

  syn lazy Set<String> Grammar.terminals() {
    Set<String> set = new LinkedHashSet<String>();
    findTerminals(set);
    return set;
  }

  protected void ASTNode.findTerminals(Set<String> set) {
    for (int i = 0; i < getNumChild(); i++) {
      getChild(i).findTerminals(set);
    }
  }

  protected void Rule.findTerminals(Set<String> set) {
    // Ignore terminals for replaced production rules.
    if (!replaced()) {
      super.findTerminals(set);
    }
  }
  protected void Element.findTerminals(Set<String> set) {
    if (!isNonTerminal()) {
      set.add(name());
    }
  }

  syn lazy Set<String> Grammar.ruleNames() {
    Set<String> set = new LinkedHashSet<String>();
    for (Rule rule : rules()) {
      set.add(rule.name());
    }
    return set;
  }

  syn lazy Collection<Rule> Grammar.rules() {
    Collection<Rule> c = new ArrayList<Rule>();
    for (Clause clause : getClauseList()) {
      if (clause instanceof Rule) {
        c.add((Rule) clause);
      }
    }
    return c;
  }

  syn lazy java.util.List<Rule> Grammar.rule(String name) {
    ArrayList<Rule> list = new ArrayList<Rule>(1);
    for (Rule rule : rules()) {
      if (rule.name().equals(name)) {
        list.add(rule);
      }
    }
    return list;
  }

  syn boolean Clause.replaces(String name) = false;

  eq ReplaceRule.replaces(String name) = name.equals(name());

  syn boolean Rule.replaced() = replaced(name());

  inh boolean Rule.replaced(String name);

  eq Grammar.getClause(int index).replaced(String name) {
    for (int i = index + 1; i < getNumClause(); i++) {
      if (getClause(i).replaces(name)) {
        return true;
      }
    }
    return false;
  }
}
