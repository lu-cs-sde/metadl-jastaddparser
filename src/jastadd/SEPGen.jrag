aspect SEPGen {
	private static String Grammar.SEP_CLASS_NAME = "PatLangParserSEP";

	private void Grammar.genImportSEP(PrintWriter w) {
		for (Clause c : getClauses()) {
			if (c instanceof Header)
				w.println(((Header)c).getCODE());
		}

		w.println("import java.lang.Iterable;");
		w.println("import java.util.Set;");
		w.println("import java.util.Map;");
		w.println("import java.lang.StringBuffer;");
		w.println("import beaver.Symbol;");
		w.println("import se.lth.sep.Category;");
		w.println("import se.lth.sep.EarleyParser;");
		w.println("import se.lth.sep.Grammar;");
		w.println("import se.lth.sep.SPPFNode;");
		w.println("import se.lth.sep.SemanticAction;");
	}

	private void Grammar.genHeaderSEP(PrintWriter w) {
		w.printf("public class %s {\n", SEP_CLASS_NAME);
		// w.println("private Grammar grammar = new Grammar();");
		// w.println("private EarleyParser parser = new EarleyParser(grammar);");
		w.println();
	}

	private void Grammar.genConstructorSEP(PrintWriter w) {
		w.printf("private %s() {\n", SEP_CLASS_NAME);
		// w.println("addRules(grammar);");
		w.println("}");
	}

	private void Grammar.genParseMethodSEP(PrintWriter w) {
		w.println("public Set<ParseTree> parse(Iterable<String> tokens, Category startSymbol) throws PepException {");
		w.println("return parser.parse(tokens, startSymbol).getParseTrees();");
		w.println("}");
	}

	public String Definition.genSemanticAction(PrintWriter w) {
		if (getCODE() != null && getCODE().length() != 0) {
			String name = "semanticAction_" + hashCode();

			w.println("SemanticAction semanticAction_" + hashCode() + " = new SemanticAction() {");
			w.println("@Override public Object act(java.util.List<Object> children) {");
			for (int i = 0; i < getNumElement(); ++i) {
				Element e = getElement(i);
				if (!getCODE().contains(e.alias()))
					continue;
				if (e.isNonTerminal()) {
					boolean isString = e.type().equals("String");
					if (isString) {
						w.printf("String %s = (String) ((Symbol)(children.get(%d))).value;\n",
								 e.alias(), i);
					} else {
						w.printf("%s %s = (%s) children.get(%d);\n", e.type(), e.alias(), e.type(), i);
					}
				} else {
					w.printf("Symbol %s = (Symbol) children.get(%d);\n", e.alias(), i);
				}
			}
			w.println(getCODE());
			w.println("}\n};");

			return name;
		} else {
			// no code, this is a passthrough
			return "SemanticAction.PASSTHROUGH";
		}
	}

	private void Grammar.genRulesSEP(PrintWriter w) {
		w.println("public static void addRules(Grammar g) {");
		for (Rule r : rules()) {
			for (Definition d : r.getDefinitions()) {
				// silently drop empty productions
				if (d.getNumElement() == 0)
					continue;
				String actionName = d.genSemanticAction(w);
				// use qualified names here to avoid clashes
				w.print("g.addRule(new se.lth.sep.Rule(" + actionName + ", ");
				w.printf("n_%s", r.getIdDecl().getID());
				for (Element e : d.getElements()) {
					if (e.isNonTerminal()) {
						w.printf(", n_%s", e.getIdUse().getID());
					} else {
						w.printf(", t_%s", e.getIdUse().getID());
					}
				}
				w.println("));");
			}
		}
		w.println("}");
	}

	private void Grammar.genFooterSEP(PrintWriter w) {
		w.println("}");
	}

	public void Grammar.genSEP(PrintStream w) {
		PrintWriter pw = new PrintWriter(new OutputStreamWriter(w));
		genSEP(pw);
		pw.flush();
	}

	public void Grammar.genSEP(PrintWriter w) {
		genImportSEP(w);
		genHeaderSEP(w);
		genCategories(w);
		genRulesSEP(w);
		genConstructorSEP(w);
		// genTrivialRulePredicate(w);
		genFooterSEP(w);
	}

	public void Grammar.genTrivialRulePredicate(PrintWriter w) {
		w.println("public static boolean isTrivialRule(final String signature) {");
		w.println("switch (signature) {");
		for (Rule r : rules()) {
			for (Definition d : r.getDefinitions()) {
				StringBuffer sb = new StringBuffer(r.getIdDecl().getID());
				for (Element e : d.getElements()) {
					sb.append(".");
					sb.append(e.getIdUse().getID());
				}
				if (d.getCODE() == null || d.getCODE().length() == 0) {
					w.printf("case \"%s\": return true;\n", sb.toString());
				}
			}
		}
		w.println("default: return false; ");
		w.println("}");
		w.println("}");
	}
}
