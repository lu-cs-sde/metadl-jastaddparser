aspect SEPGen {
	private static String Grammar.SEP_CLASS_NAME = "PatLangParserSEP";

	private void Grammar.genImport(PrintWriter w) {
		for (Clause c : getClauses()) {
			if (c instanceof Header)
				w.println(((Header)c).getCODE());
		}

		w.println("import java.lang.Iterable;");
		w.println("import java.util.Set;");
		w.println("import java.util.Map;");
		w.println("import java.lang.StringBuffer;");
		w.println("import beaver.Symbol;");
		w.println("import se.lth.sep.Category;");
		w.println("import se.lth.sep.EarleyParser;");
		w.println("import se.lth.sep.Grammar;");
		w.println("import se.lth.sep.SPPFNode;");
		w.println("import se.lth.sep.SemanticAction;");
	}

	private void Grammar.genHeader(PrintWriter w) {
		w.printf("public class %s {\n", SEP_CLASS_NAME);
		// w.println("private Grammar grammar = new Grammar();");
		// w.println("private EarleyParser parser = new EarleyParser(grammar);");
		w.println();
	}

	private void Grammar.genConstructor(PrintWriter w) {
		w.printf("private %s() {\n", SEP_CLASS_NAME);
		// w.println("addRules(grammar);");
		w.println("}");
	}

	private void Grammar.genParseMethod(PrintWriter w) {
		w.println("public Set<ParseTree> parse(Iterable<String> tokens, Category startSymbol) throws PepException {");
		w.println("return parser.parse(tokens, startSymbol).getParseTrees();");
		w.println("}");
	}

	public String Definition.genSemanticAction(PrintWriter w) {
		if (getCODE() != null && getCODE().length() != 0) {
			String name = "semanticAction_" + hashCode();

			w.println("SemanticAction semanticAction_" + hashCode() + " = new SemanticAction() {");
			w.println("@Override public Object act(java.util.List<Object> children) {");
			for (int i = 0; i < getNumElement(); ++i) {
				Element e = getElement(i);
				if (!getCODE().contains(e.alias()))
					continue;
				if (e.isNonTerminal()) {
					boolean isString = e.type().equals("String");
					if (isString) {
						w.printf("String %s = (String) ((Symbol)(children.get(%d))).value;\n",
								 e.alias(), i);
					} else {
						w.printf("%s %s = (%s) children.get(%d);\n", e.type(), e.alias(), e.type(), i);
					}
				} else {
					w.printf("Symbol %s = (Symbol) children.get(%d);\n", e.alias(), i);
				}
			}
			w.println(getCODE());
			w.println("}\n};");

			return name;
		} else {
			// no code, this is a passthrough
			return "SemanticAction.PASSTHROUGH";
		}
	}

	private void Grammar.genRules(PrintWriter w) {
		w.println("public static void addRules(Grammar g) {");
		for (Rule r : rules()) {
			for (Definition d : r.getDefinitions()) {
				// silently drop empty productions
				if (d.getNumElement() == 0)
					continue;
				String actionName = d.genSemanticAction(w);
				// use qualified names here to avoid clashes
				w.print("g.addRule(new se.lth.sep.Rule(" + actionName + ", ");
				w.printf("n_%s", r.getIdDecl().getID());
				for (Element e : d.getElements()) {
					if (e.isNonTerminal()) {
						w.printf(", n_%s", e.getIdUse().getID());
					} else {
						w.printf(", t_%s", e.getIdUse().getID());
					}
				}
				w.println("));");
			}
		}
		w.println("}");
	}

	private void Grammar.genFooter(PrintWriter w) {
		w.println("}");
	}

	private void Grammar.genCategories(PrintWriter w) {
		for (String s : terminals()) {
			w.printf("public static Category t_%s = new Category(\"%s\", /*terminal*/ true);\n", s, s);
		}
		w.println();
		for (Rule r : rules()) {
			w.printf("public static Category n_%s = new Category(\"%s\", /*terminal*/ false);\n",
					 r.getIdDecl().getID(), r.getIdDecl().getID());
		}
		w.println();
	}

	public void Grammar.genSEP(PrintStream w) {
		PrintWriter pw = new PrintWriter(new OutputStreamWriter(w));
		genSEP(pw);
		pw.flush();
	}

	public void Grammar.genSEP(PrintWriter w) {
		genImport(w);
		genHeader(w);
		genCategories(w);
		genRules(w);
		genCategoryToMetaVarType(w);
		genConstructor(w);
		genFooter(w);
	}

	private Map<String, String> Grammar.computeTypeMap() {
		TreeMap<String, String> catToType = new TreeMap<String, String>();
		for (Rule r : rules()) {
			String name = r.getIdDecl().getID();
			String type = r.type();

			assert !catToType.containsKey(name) || catToType.get(name).equals(type);
			catToType.put(name, type);
		}
		return catToType;
	}

	private Map<String, String> Grammar.computeListElementTypeMap() {
		// This is a special handlin of lists, which are typically defined as
		// l -> e
		// l -> l, e
		//
		// When pushing the metavariables up, we may end up with a tree
		// that is l -> METAVARID, where the type of l (i.e. List) can't be
		// use to build the AST node with the right type.

		TreeMap<String, String> catToType = new TreeMap<String, String>();

		boolean change;
		do {
			change = false;
			for (Rule r : rules()) {
				String name = r.getIdDecl().getID();

				if (!r.type().equals("List"))
					continue;

				HashSet<String> possibleTypes = new HashSet<String>();
				for (Definition d : r.getDefinitions()) {
					for (Element e : d.getElements()) {
						if (e.isNonTerminal() && !e.type().equals("List")) {
							possibleTypes.add(e.type());
						} else if (e.isNonTerminal() &&
								   e.type().equals("List") &&
								   catToType.containsKey(e.getIdUse().getID())) {
							possibleTypes.add(catToType.get(e.getIdUse().getID()));
						}
					}
				}
				if (possibleTypes.size() == 1) {
					String type = possibleTypes.iterator().next();
					assert !catToType.containsKey(name) || catToType.get(name).equals(type);
					if (!catToType.containsKey(name))
						change = true;
					catToType.put(name, type);
				}
			}
		} while (change);

		return catToType;

	}

	public void Grammar.genCategoryToMetaVarType(PrintWriter w) {
		Map<String, String> catToType = computeTypeMap();
		Map<String, String> catToElemType = computeListElementTypeMap();

		w.println("public static Symbol buildMetaVar(Category c, MetaVariable mv) {");
		w.println("switch (c.getName()) {");
		w.println("default: return null;");
		for (Map.Entry<String, String> ct : catToType.entrySet()) {
			if (ct.getValue().equals("String"))
				continue;
			if (ct.getValue().equals("List")) {
				String elementType = catToElemType.get(ct.getKey());
				if (elementType != null) {
					if (!elementType.equals("String")) {
						w.printf("case \"%s\": return new List(new MetaVar%s().setVar(mv));\n", ct.getKey(), elementType);
					}
				} else {
					System.err.println("Unable to infer type of list element in " + ct.getKey());
					// System.exit(1);
				}
			} else {
				w.printf("case \"%s\": return new MetaVar%s().setVar(mv);\n", ct.getKey(), ct.getValue());
			}
		}
		w.println("}");
		w.println("}");


		w.println("public static Symbol buildGap(Category c) {");
		w.println("switch (c.getName()) {");
		w.println("default: return null;");
		for (Map.Entry<String, String> ct : catToType.entrySet()) {
			if (ct.getValue().equals("String"))
				continue;
			if (ct.getValue().equals("List")) {
				String elementType = catToElemType.get(ct.getKey());
				if (elementType != null) {
					if (!elementType.equals("String")) {
						w.printf("case \"%s\": return new List(new Gap%s());\n", ct.getKey(), elementType);
					}
				}
			} else {
				w.printf("case \"%s\": return new Gap%s();\n", ct.getKey(), ct.getValue());
			}
		}
		w.println("}");
		w.println("}");
	}
}
