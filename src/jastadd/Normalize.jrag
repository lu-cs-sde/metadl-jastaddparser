import java.util.Collections;

aspect OneRule {
	// Ensure that for every non-terminal there is at most one rule that has the
	// non-terminal on the RHS

	coll Map<String, Rule> Grammar.ruleByName() [new HashMap<String, Rule>()] with putAll;
	Rule contributes (Collections.singletonMap(getIdDecl().getID(), this)) to Grammar.ruleByName();

	public void Grammar.oneRule() {
		HashMap<String, Rule> name2Rule = new HashMap<String, Rule>();
		ArrayList<Integer> removeList = new ArrayList<Integer>();

		for (int i = 0; i < getNumClause(); ++i) {
			Clause c = getClause(i);
			if (!(c instanceof Rule))
				continue;
			Rule r = (Rule) c;
			String ruleName = r.getIdDecl().getID();

			Rule firstDef = name2Rule.get(ruleName);

			if (firstDef == null) {
				name2Rule.put(ruleName, r);
			} else {
				removeList.add(i);
				if (r instanceof ReplaceRule) {
					// replace the original definitions
					firstDef.setDefinitionList(r.getDefinitionList().treeCopyNoTransform());
				} else {
					// append to the original definitions
					firstDef.getDefinitionList().addAll(r.getDefinitionList().treeCopyNoTransform());
				}
			}
		}

		// remove the unnecessary definitions
		for (int j = removeList.size() - 1; j >= 0; --j) {
			int i = removeList.get(j);
			getClauseList().removeChild(i);
		}

		flushAttrCache();
	}
}

aspect RemoveOpt {
	// Remove optional elements from the RHS.
	public class SubsetGenerator<T> {
		// WARNING: this is limited to lists of up to 31 elements.
		java.util.List<T> l;
		int n = 0;
		SubsetGenerator(java.util.List<T> l) {
			this.l = l;
			assert l.size() <= 31;
		}

		boolean hasNext() {
			return (n < (1 << l.size()));
		}

		Set<T> next() {
			java.util.Set<T> r = new HashSet<T>();
			for (int i = 0, tmp = n; tmp != 0; i++, tmp >>>= 1) {
				if ((tmp & 1) != 0) {
					r.add(l.get(i));
				}
			}
			n++;
			return r;
		}
	}

	public static String Definition.replaceVariable(String code, String name, boolean isPresent, boolean isList) {
		if (code == null)
			return null;

		String pattern = "([ (),=+])(" + name + ")([ ,)\\.+=;])";
		Pattern p = Pattern.compile(pattern);
		Matcher matcher = p.matcher(code);
		StringBuffer sb = new StringBuffer();
		while (matcher.find()) {
			if (isPresent) {
				if (isList) {
					matcher.appendReplacement(sb, "$1$2$3");
				} else {
					matcher.appendReplacement(sb, "$1new Opt($2)$3");
				}
			} else {
				if (isList) {
					matcher.appendReplacement(sb, "$1new List()$3");
				} else {
					matcher.appendReplacement(sb, "$1new Opt()$3");
				}
			}
		}
		matcher.appendTail(sb);
		return sb.toString();
	}

	public java.util.List<Definition> Definition.removeOpt() {
		java.util.List<Integer> optIdx = new ArrayList<Integer>();
		java.util.List<Definition> ret = new ArrayList<Definition>();
		for (int i = 0; i < getNumElement(); i++) {
			assert !getElement(i).isList() : "Lists are not supported";
			if (getElement(i).isOptional())
				optIdx.add(i);
		}

		SubsetGenerator<Integer> sg = new SubsetGenerator<Integer>(optIdx);
		while (sg.hasNext()) {
			Set<Integer> opts = sg.next();
			Definition d = new Definition();
			String code = getCODE();

			for (int i = 0; i < getNumElement(); i++) {
				Element e = getElement(i);
				if (e.isOptional()) {
					if (opts.contains(i)) {
						// build a non-optional element
						Element ne = new Element();
						ne.setIdUse(e.getIdUse().treeCopyNoTransform());
						ne.setNameOpt(e.getNameOpt().treeCopyNoTransform());
						d.addElement(ne);
						if (e.isNonTerminal())
							code = replaceVariable(code, e.alias(), true, e.type().equals("List"));
					} else {
						if (e.isNonTerminal())
							code = replaceVariable(code, e.alias(), false, e.type().equals("List"));
					}
				} else {
					d.addElement(e.treeCopyNoTransform());
				}
			}
			d.setCODE(code);

			ret.add(d);
		}

		return ret;
	}

	public void Rule.removeOpt() {
		java.util.List<Definition> newDefs = new ArrayList<Definition>();
		for (int i = getNumDefinition() - 1; i >= 0; --i) {
			Definition d = getDefinition(i);
			java.util.List<Definition> expanded = d.removeOpt();
			if (expanded.size() != 0) {
				newDefs.addAll(expanded);
				getDefinitionList().removeChild(i);
			}
		}
		getDefinitionList().addAll(newDefs);
	}

	public void Grammar.removeOpt() {
		for (Rule r : rules())
			r.removeOpt();
	}
}
