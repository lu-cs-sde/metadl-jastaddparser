aspect PEPGen {
	private static String Grammar.CLASS_NAME = "PatLangParserPEP";

	private void Grammar.genImport(PrintWriter w) {
		for (Clause c : getClauses()) {
			if (c instanceof Header)
				w.println(((Header)c).getCODE());
		}

		w.println("import edu.osu.ling.pep.*;");
		w.println("import java.lang.Iterable;");
		w.println("import java.util.Set;");
		w.println("import java.util.Map;");
		w.println("import java.lang.StringBuffer;");
		w.println("import beaver.Symbol;");

	}

	private void Grammar.genHeader(PrintWriter w) {
		w.printf("public class %s {\n", CLASS_NAME);
		w.println("private Grammar grammar = new Grammar(\"PatLangGrammar\");");
		w.println("private EarleyParser parser = new EarleyParser(grammar);");
		w.println();
	}

	private void Grammar.genCategories(PrintWriter w) {
		for (String s : terminals()) {
			w.printf("public static Category t_%s = new Category(\"%s\", /*terminal*/ true);\n", s, s);
		}
		w.println();
		for (Rule r : rules()) {
			w.printf("public static Category n_%s = new Category(\"%s\", /*terminal*/ false);\n",
					 r.getIdDecl().getID(), r.getIdDecl().getID());
		}
		w.println();
	}

	private void Grammar.genConstructor(PrintWriter w) {
		w.printf("public %s() {\n", CLASS_NAME);
		w.println("addRules(grammar);");
		w.println("}");
	}

	private void Grammar.genParseMethod(PrintWriter w) {
		w.println("public Set<ParseTree> parse(Iterable<String> tokens, Category startSymbol) throws PepException {");
		w.println("return parser.parse(tokens, startSymbol).getParseTrees();");
		w.println("}");
	}

	private void Grammar.genRules(PrintWriter w) {
		w.println("public static void addRules(Grammar g) {");
		for (Rule r : rules()) {
			for (Definition d : r.getDefinitions()) {
				// silently drop empty productions
				if (d.getNumElement() == 0)
					continue;
				// use qualified names here to avoid clashes
				w.print("g.addRule(new edu.osu.ling.pep.Rule(");
				w.printf("n_%s", r.getIdDecl().getID());
				for (Element e : d.getElements()) {
					if (e.isNonTerminal()) {
						w.printf(", n_%s", e.getIdUse().getID());
					} else {
						w.printf(", t_%s", e.getIdUse().getID());
					}
				}
				w.println("));");
			}
		}
		w.println("}");
	}

	private void Grammar.genFooter(PrintWriter w) {
		w.println("}");
	}

	public void Grammar.genPEP(PrintStream w) {
		PrintWriter pw = new PrintWriter(new OutputStreamWriter(w));
		genPEP(pw);
		pw.flush();
	}

	public void Grammar.genPEP(PrintWriter w) {
		genImport(w);
		genHeader(w);
		genCategories(w);
		genRules(w);
		genConstructor(w);
		// genParseMethod(w);
		genRuleSignature(w);
		genVisitor(w);
		genFooter(w);
	}

	public void Grammar.genRuleSignature(PrintWriter w) {
		w.println("public static String signature(final ParseTree pt) {");
		w.println("StringBuffer sb = new StringBuffer(pt.getNode().getName());");
		w.println("for (ParseTree ptc : pt.getChildren()) { sb.append('.'); sb.append(ptc.getNode().getName()); }");
		w.println("return sb.toString();");
		w.println("}");

	}

	public static String Grammar.replaceTokens(String code, String name) {
		return null;
	}


	public void Grammar.genVisitor(PrintWriter w) {
		w.println("public static Symbol visit(final Map<ParseTree, Symbol> pt2s, final ParseTree pt) {");
		w.println("switch (signature(pt)) {");
		w.println("default: return null;");
		for (Rule r : rules()) {
			for (Definition d : r.getDefinitions()) {
				StringBuffer sb = new StringBuffer(r.getIdDecl().getID());
				for (Element e : d.getElements()) {
					sb.append(".");
					sb.append(e.getIdUse().getID());
				}

				w.printf("case \"%s\": {\n", sb.toString());
				if (d.getCODE() != null && d.getCODE().length() != 0) {
					for (int i = 0; i < d.getNumElement(); ++i) {
						Element e = d.getElement(i);
						if (!d.getCODE().contains(e.alias()))
							continue;
						if (e.isNonTerminal()) {
							w.printf("%s %s = (%s) pt2s.get(pt.getChildren()[%d])%s;\n", e.type(), e.alias(), e.type(), i,
									 e.type().equals("String") ? ".value" : "");
						} else {
							w.printf("Symbol %s = pt2s.get(pt.getChildren()[%d]);\n", e.alias(), i);
						}
					}
					w.println(d.getCODE());
				} else {
					w.println("return pt2s.get(pt.getChildren()[0]);");
				}
				w.println("}");
			}
		}
		w.println("}");
		w.println("}");
	}
}
